// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================

#ifndef XCALC_HOG_H
#define XCALC_HOG_H

#ifdef __cplusplus
extern "C" {
#endif

/***************************** Include Files *********************************/
#ifndef __linux__
#include "xil_types.h"
#include "xil_assert.h"
#include "xstatus.h"
#include "xil_io.h"
#else
#include <stdint.h>
#include <assert.h>
#include <dirent.h>
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/mman.h>
#include <unistd.h>
#include <stddef.h>
#endif
#include "xcalc_hog_hw.h"

/**************************** Type Definitions ******************************/
#ifdef __linux__
typedef uint8_t u8;
typedef uint16_t u16;
typedef uint32_t u32;
#else
typedef struct {
    u16 DeviceId;
    u32 Control_bus_BaseAddress;
} XCalc_hog_Config;
#endif

typedef struct {
    u32 Control_bus_BaseAddress;
    u32 IsReady;
} XCalc_hog;

/***************** Macros (Inline Functions) Definitions *********************/
#ifndef __linux__
#define XCalc_hog_WriteReg(BaseAddress, RegOffset, Data) \
    Xil_Out32((BaseAddress) + (RegOffset), (u32)(Data))
#define XCalc_hog_ReadReg(BaseAddress, RegOffset) \
    Xil_In32((BaseAddress) + (RegOffset))
#else
#define XCalc_hog_WriteReg(BaseAddress, RegOffset, Data) \
    *(volatile u32*)((BaseAddress) + (RegOffset)) = (u32)(Data)
#define XCalc_hog_ReadReg(BaseAddress, RegOffset) \
    *(volatile u32*)((BaseAddress) + (RegOffset))

#define Xil_AssertVoid(expr)    assert(expr)
#define Xil_AssertNonvoid(expr) assert(expr)

#define XST_SUCCESS             0
#define XST_DEVICE_NOT_FOUND    2
#define XST_OPEN_DEVICE_FAILED  3
#define XIL_COMPONENT_IS_READY  1
#endif

/************************** Function Prototypes *****************************/
#ifndef __linux__
int XCalc_hog_Initialize(XCalc_hog *InstancePtr, u16 DeviceId);
XCalc_hog_Config* XCalc_hog_LookupConfig(u16 DeviceId);
int XCalc_hog_CfgInitialize(XCalc_hog *InstancePtr, XCalc_hog_Config *ConfigPtr);
#else
int XCalc_hog_Initialize(XCalc_hog *InstancePtr, const char* InstanceName);
int XCalc_hog_Release(XCalc_hog *InstancePtr);
#endif

void XCalc_hog_Start(XCalc_hog *InstancePtr);
u32 XCalc_hog_IsDone(XCalc_hog *InstancePtr);
u32 XCalc_hog_IsIdle(XCalc_hog *InstancePtr);
u32 XCalc_hog_IsReady(XCalc_hog *InstancePtr);
void XCalc_hog_EnableAutoRestart(XCalc_hog *InstancePtr);
void XCalc_hog_DisableAutoRestart(XCalc_hog *InstancePtr);

void XCalc_hog_Set_imageptr(XCalc_hog *InstancePtr, u32 Data);
u32 XCalc_hog_Get_imageptr(XCalc_hog *InstancePtr);
void XCalc_hog_Set_feature_r(XCalc_hog *InstancePtr, u32 Data);
u32 XCalc_hog_Get_feature_r(XCalc_hog *InstancePtr);

void XCalc_hog_InterruptGlobalEnable(XCalc_hog *InstancePtr);
void XCalc_hog_InterruptGlobalDisable(XCalc_hog *InstancePtr);
void XCalc_hog_InterruptEnable(XCalc_hog *InstancePtr, u32 Mask);
void XCalc_hog_InterruptDisable(XCalc_hog *InstancePtr, u32 Mask);
void XCalc_hog_InterruptClear(XCalc_hog *InstancePtr, u32 Mask);
u32 XCalc_hog_InterruptGetEnabled(XCalc_hog *InstancePtr);
u32 XCalc_hog_InterruptGetStatus(XCalc_hog *InstancePtr);

#ifdef __cplusplus
}
#endif

#endif
