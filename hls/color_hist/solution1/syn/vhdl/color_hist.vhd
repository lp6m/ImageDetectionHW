-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity color_hist is
generic (
    C_M_AXI_INPUT_IMAGE_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_INPUT_IMAGE_ID_WIDTH : INTEGER := 1;
    C_M_AXI_INPUT_IMAGE_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_INPUT_IMAGE_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_INPUT_IMAGE_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_INPUT_IMAGE_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_INPUT_IMAGE_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_INPUT_IMAGE_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_FEATURE_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_FEATURE_ID_WIDTH : INTEGER := 1;
    C_M_AXI_FEATURE_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_FEATURE_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_FEATURE_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_FEATURE_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_FEATURE_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_FEATURE_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CONTROL_BUS_ADDR_WIDTH : INTEGER := 5;
    C_S_AXI_CONTROL_BUS_DATA_WIDTH : INTEGER := 32;
    C_S_AXI_SPECS_ADDR_WIDTH : INTEGER := 5;
    C_S_AXI_SPECS_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_INPUT_IMAGE_USER_VALUE : INTEGER := 0;
    C_M_AXI_INPUT_IMAGE_PROT_VALUE : INTEGER := 0;
    C_M_AXI_INPUT_IMAGE_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_FEATURE_USER_VALUE : INTEGER := 0;
    C_M_AXI_FEATURE_PROT_VALUE : INTEGER := 0;
    C_M_AXI_FEATURE_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_INPUT_IMAGE_AWVALID : OUT STD_LOGIC;
    m_axi_INPUT_IMAGE_AWREADY : IN STD_LOGIC;
    m_axi_INPUT_IMAGE_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_INPUT_IMAGE_ADDR_WIDTH-1 downto 0);
    m_axi_INPUT_IMAGE_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_INPUT_IMAGE_ID_WIDTH-1 downto 0);
    m_axi_INPUT_IMAGE_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_INPUT_IMAGE_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_INPUT_IMAGE_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_INPUT_IMAGE_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_INPUT_IMAGE_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_INPUT_IMAGE_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_INPUT_IMAGE_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_INPUT_IMAGE_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_INPUT_IMAGE_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_INPUT_IMAGE_AWUSER_WIDTH-1 downto 0);
    m_axi_INPUT_IMAGE_WVALID : OUT STD_LOGIC;
    m_axi_INPUT_IMAGE_WREADY : IN STD_LOGIC;
    m_axi_INPUT_IMAGE_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_INPUT_IMAGE_DATA_WIDTH-1 downto 0);
    m_axi_INPUT_IMAGE_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_INPUT_IMAGE_DATA_WIDTH/8-1 downto 0);
    m_axi_INPUT_IMAGE_WLAST : OUT STD_LOGIC;
    m_axi_INPUT_IMAGE_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_INPUT_IMAGE_ID_WIDTH-1 downto 0);
    m_axi_INPUT_IMAGE_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_INPUT_IMAGE_WUSER_WIDTH-1 downto 0);
    m_axi_INPUT_IMAGE_ARVALID : OUT STD_LOGIC;
    m_axi_INPUT_IMAGE_ARREADY : IN STD_LOGIC;
    m_axi_INPUT_IMAGE_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_INPUT_IMAGE_ADDR_WIDTH-1 downto 0);
    m_axi_INPUT_IMAGE_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_INPUT_IMAGE_ID_WIDTH-1 downto 0);
    m_axi_INPUT_IMAGE_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_INPUT_IMAGE_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_INPUT_IMAGE_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_INPUT_IMAGE_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_INPUT_IMAGE_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_INPUT_IMAGE_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_INPUT_IMAGE_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_INPUT_IMAGE_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_INPUT_IMAGE_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_INPUT_IMAGE_ARUSER_WIDTH-1 downto 0);
    m_axi_INPUT_IMAGE_RVALID : IN STD_LOGIC;
    m_axi_INPUT_IMAGE_RREADY : OUT STD_LOGIC;
    m_axi_INPUT_IMAGE_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_INPUT_IMAGE_DATA_WIDTH-1 downto 0);
    m_axi_INPUT_IMAGE_RLAST : IN STD_LOGIC;
    m_axi_INPUT_IMAGE_RID : IN STD_LOGIC_VECTOR (C_M_AXI_INPUT_IMAGE_ID_WIDTH-1 downto 0);
    m_axi_INPUT_IMAGE_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_INPUT_IMAGE_RUSER_WIDTH-1 downto 0);
    m_axi_INPUT_IMAGE_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_INPUT_IMAGE_BVALID : IN STD_LOGIC;
    m_axi_INPUT_IMAGE_BREADY : OUT STD_LOGIC;
    m_axi_INPUT_IMAGE_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_INPUT_IMAGE_BID : IN STD_LOGIC_VECTOR (C_M_AXI_INPUT_IMAGE_ID_WIDTH-1 downto 0);
    m_axi_INPUT_IMAGE_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_INPUT_IMAGE_BUSER_WIDTH-1 downto 0);
    m_axi_FEATURE_AWVALID : OUT STD_LOGIC;
    m_axi_FEATURE_AWREADY : IN STD_LOGIC;
    m_axi_FEATURE_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_FEATURE_ADDR_WIDTH-1 downto 0);
    m_axi_FEATURE_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_FEATURE_ID_WIDTH-1 downto 0);
    m_axi_FEATURE_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_FEATURE_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_FEATURE_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_FEATURE_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_FEATURE_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_FEATURE_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_FEATURE_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_FEATURE_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_FEATURE_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_FEATURE_AWUSER_WIDTH-1 downto 0);
    m_axi_FEATURE_WVALID : OUT STD_LOGIC;
    m_axi_FEATURE_WREADY : IN STD_LOGIC;
    m_axi_FEATURE_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_FEATURE_DATA_WIDTH-1 downto 0);
    m_axi_FEATURE_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_FEATURE_DATA_WIDTH/8-1 downto 0);
    m_axi_FEATURE_WLAST : OUT STD_LOGIC;
    m_axi_FEATURE_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_FEATURE_ID_WIDTH-1 downto 0);
    m_axi_FEATURE_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_FEATURE_WUSER_WIDTH-1 downto 0);
    m_axi_FEATURE_ARVALID : OUT STD_LOGIC;
    m_axi_FEATURE_ARREADY : IN STD_LOGIC;
    m_axi_FEATURE_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_FEATURE_ADDR_WIDTH-1 downto 0);
    m_axi_FEATURE_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_FEATURE_ID_WIDTH-1 downto 0);
    m_axi_FEATURE_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_FEATURE_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_FEATURE_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_FEATURE_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_FEATURE_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_FEATURE_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_FEATURE_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_FEATURE_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_FEATURE_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_FEATURE_ARUSER_WIDTH-1 downto 0);
    m_axi_FEATURE_RVALID : IN STD_LOGIC;
    m_axi_FEATURE_RREADY : OUT STD_LOGIC;
    m_axi_FEATURE_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_FEATURE_DATA_WIDTH-1 downto 0);
    m_axi_FEATURE_RLAST : IN STD_LOGIC;
    m_axi_FEATURE_RID : IN STD_LOGIC_VECTOR (C_M_AXI_FEATURE_ID_WIDTH-1 downto 0);
    m_axi_FEATURE_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_FEATURE_RUSER_WIDTH-1 downto 0);
    m_axi_FEATURE_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_FEATURE_BVALID : IN STD_LOGIC;
    m_axi_FEATURE_BREADY : OUT STD_LOGIC;
    m_axi_FEATURE_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_FEATURE_BID : IN STD_LOGIC_VECTOR (C_M_AXI_FEATURE_ID_WIDTH-1 downto 0);
    m_axi_FEATURE_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_FEATURE_BUSER_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_AWVALID : IN STD_LOGIC;
    s_axi_CONTROL_BUS_AWREADY : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_WVALID : IN STD_LOGIC;
    s_axi_CONTROL_BUS_WREADY : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_DATA_WIDTH/8-1 downto 0);
    s_axi_CONTROL_BUS_ARVALID : IN STD_LOGIC;
    s_axi_CONTROL_BUS_ARREADY : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_RVALID : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_RREADY : IN STD_LOGIC;
    s_axi_CONTROL_BUS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CONTROL_BUS_BVALID : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_BREADY : IN STD_LOGIC;
    s_axi_CONTROL_BUS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC;
    s_axi_SPECS_AWVALID : IN STD_LOGIC;
    s_axi_SPECS_AWREADY : OUT STD_LOGIC;
    s_axi_SPECS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_SPECS_ADDR_WIDTH-1 downto 0);
    s_axi_SPECS_WVALID : IN STD_LOGIC;
    s_axi_SPECS_WREADY : OUT STD_LOGIC;
    s_axi_SPECS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_SPECS_DATA_WIDTH-1 downto 0);
    s_axi_SPECS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_SPECS_DATA_WIDTH/8-1 downto 0);
    s_axi_SPECS_ARVALID : IN STD_LOGIC;
    s_axi_SPECS_ARREADY : OUT STD_LOGIC;
    s_axi_SPECS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_SPECS_ADDR_WIDTH-1 downto 0);
    s_axi_SPECS_RVALID : OUT STD_LOGIC;
    s_axi_SPECS_RREADY : IN STD_LOGIC;
    s_axi_SPECS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_SPECS_DATA_WIDTH-1 downto 0);
    s_axi_SPECS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_SPECS_BVALID : OUT STD_LOGIC;
    s_axi_SPECS_BREADY : IN STD_LOGIC;
    s_axi_SPECS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0) );
end;


architecture behav of color_hist is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "color_hist,hls_ip_2017_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=6.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.250000,HLS_SYN_LAT=3188,HLS_SYN_TPT=none,HLS_SYN_MEM=7,HLS_SYN_DSP=9,HLS_SYN_FF=5123,HLS_SYN_LUT=5657}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (14 downto 0) := "000000000001000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000010000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (14 downto 0) := "000000000100000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (14 downto 0) := "000000001000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (14 downto 0) := "000000010000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (14 downto 0) := "000000100000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (14 downto 0) := "000001000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (14 downto 0) := "000010000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (14 downto 0) := "000100000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (14 downto 0) := "001000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (14 downto 0) := "010000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (14 downto 0) := "100000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv4_E : STD_LOGIC_VECTOR (3 downto 0) := "1110";
    constant ap_const_lv4_D : STD_LOGIC_VECTOR (3 downto 0) := "1101";
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv4_B : STD_LOGIC_VECTOR (3 downto 0) := "1011";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_const_lv4_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_const_lv4_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv11_600 : STD_LOGIC_VECTOR (10 downto 0) := "11000000000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv7_60 : STD_LOGIC_VECTOR (6 downto 0) := "1100000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv11_60 : STD_LOGIC_VECTOR (10 downto 0) := "00001100000";
    constant ap_const_lv14_60 : STD_LOGIC_VECTOR (13 downto 0) := "00000001100000";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv6_23 : STD_LOGIC_VECTOR (5 downto 0) := "100011";
    constant ap_const_lv6_24 : STD_LOGIC_VECTOR (5 downto 0) := "100100";
    constant ap_const_lv30_5556 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000101010101010110";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal specs_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal specs_ce0 : STD_LOGIC;
    signal specs_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal imageptr : STD_LOGIC_VECTOR (31 downto 0);
    signal feature_r : STD_LOGIC_VECTOR (31 downto 0);
    signal INPUT_IMAGE_blk_n_AR : STD_LOGIC;
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal tmp_16_reg_1059 : STD_LOGIC_VECTOR (0 downto 0);
    signal INPUT_IMAGE_blk_n_R : STD_LOGIC;
    signal ap_enable_reg_pp0_iter22 : STD_LOGIC := '0';
    signal FEATURE_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal FEATURE_blk_n_W : STD_LOGIC;
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal exitcond2_reg_1096 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp1_iter1_exitcond2_reg_1096 : STD_LOGIC_VECTOR (0 downto 0);
    signal FEATURE_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal INPUT_IMAGE_AWREADY : STD_LOGIC;
    signal INPUT_IMAGE_WREADY : STD_LOGIC;
    signal INPUT_IMAGE_ARVALID : STD_LOGIC;
    signal INPUT_IMAGE_ARREADY : STD_LOGIC;
    signal INPUT_IMAGE_RVALID : STD_LOGIC;
    signal INPUT_IMAGE_RREADY : STD_LOGIC;
    signal INPUT_IMAGE_RDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal INPUT_IMAGE_RLAST : STD_LOGIC;
    signal INPUT_IMAGE_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal INPUT_IMAGE_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal INPUT_IMAGE_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal INPUT_IMAGE_BVALID : STD_LOGIC;
    signal INPUT_IMAGE_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal INPUT_IMAGE_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal INPUT_IMAGE_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal FEATURE_AWVALID : STD_LOGIC;
    signal FEATURE_AWREADY : STD_LOGIC;
    signal FEATURE_WVALID : STD_LOGIC;
    signal FEATURE_WREADY : STD_LOGIC;
    signal FEATURE_ARREADY : STD_LOGIC;
    signal FEATURE_RVALID : STD_LOGIC;
    signal FEATURE_RDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal FEATURE_RLAST : STD_LOGIC;
    signal FEATURE_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal FEATURE_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal FEATURE_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal FEATURE_BVALID : STD_LOGIC;
    signal FEATURE_BREADY : STD_LOGIC;
    signal FEATURE_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal FEATURE_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal FEATURE_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_reg_524 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state5_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_state20_pp0_stage0_iter15 : BOOLEAN;
    signal ap_sig_ioackin_INPUT_IMAGE_ARREADY : STD_LOGIC;
    signal ap_block_state20_io : BOOLEAN;
    signal ap_block_state21_pp0_stage0_iter16 : BOOLEAN;
    signal ap_block_state22_pp0_stage0_iter17 : BOOLEAN;
    signal ap_block_state23_pp0_stage0_iter18 : BOOLEAN;
    signal ap_block_state24_pp0_stage0_iter19 : BOOLEAN;
    signal ap_block_state25_pp0_stage0_iter20 : BOOLEAN;
    signal ap_block_state26_pp0_stage0_iter21 : BOOLEAN;
    signal ap_block_state27_pp0_stage0_iter22 : BOOLEAN;
    signal ap_block_state28_pp0_stage0_iter23 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal i_reg_536 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_reg_547 : STD_LOGIC_VECTOR (6 downto 0);
    signal indvar8_reg_569 : STD_LOGIC_VECTOR (5 downto 0);
    signal y_reg_934 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal x_reg_945 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal FEATURE_addr_reg_956 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_10_cast_fu_621_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_10_cast_reg_962 : STD_LOGIC_VECTOR (32 downto 0);
    signal original_width_reg_967 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_629_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_reg_973 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond_flatten_fu_668_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_978 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter1_exitcond_flatten_reg_978 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter2_exitcond_flatten_reg_978 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter3_exitcond_flatten_reg_978 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter4_exitcond_flatten_reg_978 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter5_exitcond_flatten_reg_978 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter6_exitcond_flatten_reg_978 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter7_exitcond_flatten_reg_978 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter8_exitcond_flatten_reg_978 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter9_exitcond_flatten_reg_978 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter10_exitcond_flatten_reg_978 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter11_exitcond_flatten_reg_978 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter12_exitcond_flatten_reg_978 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter13_exitcond_flatten_reg_978 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_next_fu_674_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal indvar_flatten_next_reg_982 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal exitcond_fu_680_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_987 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter1_exitcond_reg_987 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter2_exitcond_reg_987 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter3_exitcond_reg_987 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter4_exitcond_reg_987 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter5_exitcond_reg_987 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter6_exitcond_reg_987 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_mid2_fu_686_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal indvar_mid2_reg_992 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_mid1_fu_704_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_mid1_reg_997 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_cast_cast_mid2_1_fu_743_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_8_cast_cast_mid2_1_reg_1002 : STD_LOGIC_VECTOR (11 downto 0);
    signal i_mid2_fu_751_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_next_fu_759_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_9_fu_785_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_9_reg_1017 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_reg_pp0_iter2_tmp_9_reg_1017 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_reg_pp0_iter3_tmp_9_reg_1017 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_reg_pp0_iter4_tmp_9_reg_1017 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_771_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_reg_1023 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_775_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_mid1_reg_1028 : STD_LOGIC_VECTOR (31 downto 0);
    signal offset_fu_809_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal offset_reg_1038 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_mid1_fu_815_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_mid1_reg_1043 : STD_LOGIC_VECTOR (31 downto 0);
    signal INPUT_IMAGE_addr_reg_1049 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_pp0_iter8_INPUT_IMAGE_addr_reg_1049 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_pp0_iter9_INPUT_IMAGE_addr_reg_1049 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_pp0_iter10_INPUT_IMAGE_addr_reg_1049 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_pp0_iter11_INPUT_IMAGE_addr_reg_1049 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_pp0_iter12_INPUT_IMAGE_addr_reg_1049 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_pp0_iter13_INPUT_IMAGE_addr_reg_1049 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_pp0_iter14_INPUT_IMAGE_addr_reg_1049 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_t_reg_1055 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_pp0_iter8_tmp_t_reg_1055 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_pp0_iter9_tmp_t_reg_1055 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_pp0_iter10_tmp_t_reg_1055 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_pp0_iter11_tmp_t_reg_1055 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_pp0_iter12_tmp_t_reg_1055 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_pp0_iter13_tmp_t_reg_1055 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_pp0_iter14_tmp_t_reg_1055 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_pp0_iter15_tmp_t_reg_1055 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_pp0_iter16_tmp_t_reg_1055 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_pp0_iter17_tmp_t_reg_1055 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_pp0_iter18_tmp_t_reg_1055 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_pp0_iter19_tmp_t_reg_1055 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_pp0_iter20_tmp_t_reg_1055 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_pp0_iter21_tmp_t_reg_1055 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_pp0_iter22_tmp_t_reg_1055 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_16_fu_863_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal INPUT_IMAGE_addr_rea_reg_1063 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_794_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_6_reg_1083 : STD_LOGIC_VECTOR (13 downto 0);
    signal indvarinc_fu_888_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal exitcond2_fu_905_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_block_state33_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state34_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state35_pp1_stage0_iter2 : BOOLEAN;
    signal ap_sig_ioackin_FEATURE_WREADY : STD_LOGIC;
    signal ap_block_state35_io : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal indvar_next9_fu_911_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal rst_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal rst_load_reg_1110 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_condition_pp0_exit_iter6_state11 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter18 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter19 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter20 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter21 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter23 : STD_LOGIC := '0';
    signal ap_sig_ioackin_FEATURE_AWREADY : STD_LOGIC;
    signal grp_calc_hist_fu_580_ap_done : STD_LOGIC;
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state33 : STD_LOGIC;
    signal image_buffer_0_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal image_buffer_0_ce0 : STD_LOGIC;
    signal image_buffer_0_we0 : STD_LOGIC;
    signal image_buffer_0_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal image_buffer_1_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal image_buffer_1_ce0 : STD_LOGIC;
    signal image_buffer_1_we0 : STD_LOGIC;
    signal image_buffer_1_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal image_buffer_2_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal image_buffer_2_ce0 : STD_LOGIC;
    signal image_buffer_2_we0 : STD_LOGIC;
    signal image_buffer_2_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal image_buffer_3_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal image_buffer_3_ce0 : STD_LOGIC;
    signal image_buffer_3_we0 : STD_LOGIC;
    signal image_buffer_3_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal image_buffer_4_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal image_buffer_4_ce0 : STD_LOGIC;
    signal image_buffer_4_we0 : STD_LOGIC;
    signal image_buffer_4_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal image_buffer_5_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal image_buffer_5_ce0 : STD_LOGIC;
    signal image_buffer_5_we0 : STD_LOGIC;
    signal image_buffer_5_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal image_buffer_6_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal image_buffer_6_ce0 : STD_LOGIC;
    signal image_buffer_6_we0 : STD_LOGIC;
    signal image_buffer_6_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal image_buffer_7_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal image_buffer_7_ce0 : STD_LOGIC;
    signal image_buffer_7_we0 : STD_LOGIC;
    signal image_buffer_7_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal image_buffer_8_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal image_buffer_8_ce0 : STD_LOGIC;
    signal image_buffer_8_we0 : STD_LOGIC;
    signal image_buffer_8_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal image_buffer_9_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal image_buffer_9_ce0 : STD_LOGIC;
    signal image_buffer_9_we0 : STD_LOGIC;
    signal image_buffer_9_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal image_buffer_10_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal image_buffer_10_ce0 : STD_LOGIC;
    signal image_buffer_10_we0 : STD_LOGIC;
    signal image_buffer_10_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal image_buffer_11_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal image_buffer_11_ce0 : STD_LOGIC;
    signal image_buffer_11_we0 : STD_LOGIC;
    signal image_buffer_11_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal image_buffer_12_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal image_buffer_12_ce0 : STD_LOGIC;
    signal image_buffer_12_we0 : STD_LOGIC;
    signal image_buffer_12_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal image_buffer_13_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal image_buffer_13_ce0 : STD_LOGIC;
    signal image_buffer_13_we0 : STD_LOGIC;
    signal image_buffer_13_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal image_buffer_14_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal image_buffer_14_ce0 : STD_LOGIC;
    signal image_buffer_14_we0 : STD_LOGIC;
    signal image_buffer_14_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal image_buffer_15_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal image_buffer_15_ce0 : STD_LOGIC;
    signal image_buffer_15_we0 : STD_LOGIC;
    signal image_buffer_15_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal rst_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal rst_ce0 : STD_LOGIC;
    signal rst_we0 : STD_LOGIC;
    signal rst_ce1 : STD_LOGIC;
    signal rst_we1 : STD_LOGIC;
    signal grp_calc_hist_fu_580_ap_start : STD_LOGIC;
    signal grp_calc_hist_fu_580_ap_idle : STD_LOGIC;
    signal grp_calc_hist_fu_580_ap_ready : STD_LOGIC;
    signal grp_calc_hist_fu_580_image_buffer_0_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_calc_hist_fu_580_image_buffer_0_ce0 : STD_LOGIC;
    signal grp_calc_hist_fu_580_image_buffer_1_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_calc_hist_fu_580_image_buffer_1_ce0 : STD_LOGIC;
    signal grp_calc_hist_fu_580_image_buffer_2_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_calc_hist_fu_580_image_buffer_2_ce0 : STD_LOGIC;
    signal grp_calc_hist_fu_580_image_buffer_3_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_calc_hist_fu_580_image_buffer_3_ce0 : STD_LOGIC;
    signal grp_calc_hist_fu_580_image_buffer_4_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_calc_hist_fu_580_image_buffer_4_ce0 : STD_LOGIC;
    signal grp_calc_hist_fu_580_image_buffer_5_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_calc_hist_fu_580_image_buffer_5_ce0 : STD_LOGIC;
    signal grp_calc_hist_fu_580_image_buffer_6_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_calc_hist_fu_580_image_buffer_6_ce0 : STD_LOGIC;
    signal grp_calc_hist_fu_580_image_buffer_7_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_calc_hist_fu_580_image_buffer_7_ce0 : STD_LOGIC;
    signal grp_calc_hist_fu_580_image_buffer_8_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_calc_hist_fu_580_image_buffer_8_ce0 : STD_LOGIC;
    signal grp_calc_hist_fu_580_image_buffer_9_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_calc_hist_fu_580_image_buffer_9_ce0 : STD_LOGIC;
    signal grp_calc_hist_fu_580_image_buffer_10_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_calc_hist_fu_580_image_buffer_10_ce0 : STD_LOGIC;
    signal grp_calc_hist_fu_580_image_buffer_11_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_calc_hist_fu_580_image_buffer_11_ce0 : STD_LOGIC;
    signal grp_calc_hist_fu_580_image_buffer_12_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_calc_hist_fu_580_image_buffer_12_ce0 : STD_LOGIC;
    signal grp_calc_hist_fu_580_image_buffer_13_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_calc_hist_fu_580_image_buffer_13_ce0 : STD_LOGIC;
    signal grp_calc_hist_fu_580_image_buffer_14_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_calc_hist_fu_580_image_buffer_14_ce0 : STD_LOGIC;
    signal grp_calc_hist_fu_580_image_buffer_15_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_calc_hist_fu_580_image_buffer_15_ce0 : STD_LOGIC;
    signal grp_calc_hist_fu_580_rst_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_calc_hist_fu_580_rst_ce0 : STD_LOGIC;
    signal grp_calc_hist_fu_580_rst_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_calc_hist_fu_580_rst_ce1 : STD_LOGIC;
    signal grp_calc_hist_fu_580_rst_we1 : STD_LOGIC;
    signal grp_calc_hist_fu_580_rst_d1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_mux_indvar_flatten_phi_fu_528_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal invdar_reg_558 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_5_fu_899_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal ap_reg_grp_calc_hist_fu_580_ap_start : STD_LOGIC := '0';
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal tmp_s_fu_869_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_fu_894_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_11_fu_917_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_fu_611_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal imageptr2_sum_cast_fu_844_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ioackin_INPUT_IMAGE_ARREADY : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal ap_reg_ioackin_FEATURE_AWREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_FEATURE_WREADY : STD_LOGIC := '0';
    signal ap_block_pp1_stage0_01001 : BOOLEAN;
    signal feature3_fu_601_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal i_cast7_fu_625_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_fu_634_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl3_fu_638_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl4_fu_650_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl3_cast_fu_646_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl4_cast_fu_658_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal i_s_fu_694_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_cast7_mid1_fu_700_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_fu_709_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl3_mid1_fu_713_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl4_mid1_fu_725_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl3_cast_mid1_fu_721_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl4_cast_mid1_fu_733_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_8_mid1_fu_737_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_8_fu_662_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_765_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_8_cast_cast_mid2_fu_779_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal indvar_cast4_cast_fu_782_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_794_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_2_fu_799_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_fu_803_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_fu_819_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal offset_mid1_fu_824_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_13_fu_829_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_mid2_cast_fu_835_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal imageptr2_sum_fu_839_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal grp_fu_922_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_765_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_922_p0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_922_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_765_ce : STD_LOGIC;
    signal grp_fu_771_ce : STD_LOGIC;
    signal grp_fu_775_ce : STD_LOGIC;
    signal grp_fu_794_ce : STD_LOGIC;
    signal grp_fu_922_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal grp_fu_922_p00 : STD_LOGIC_VECTOR (29 downto 0);

    component calc_hist IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        image_buffer_0_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        image_buffer_0_ce0 : OUT STD_LOGIC;
        image_buffer_0_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        image_buffer_1_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        image_buffer_1_ce0 : OUT STD_LOGIC;
        image_buffer_1_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        image_buffer_2_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        image_buffer_2_ce0 : OUT STD_LOGIC;
        image_buffer_2_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        image_buffer_3_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        image_buffer_3_ce0 : OUT STD_LOGIC;
        image_buffer_3_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        image_buffer_4_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        image_buffer_4_ce0 : OUT STD_LOGIC;
        image_buffer_4_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        image_buffer_5_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        image_buffer_5_ce0 : OUT STD_LOGIC;
        image_buffer_5_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        image_buffer_6_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        image_buffer_6_ce0 : OUT STD_LOGIC;
        image_buffer_6_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        image_buffer_7_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        image_buffer_7_ce0 : OUT STD_LOGIC;
        image_buffer_7_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        image_buffer_8_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        image_buffer_8_ce0 : OUT STD_LOGIC;
        image_buffer_8_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        image_buffer_9_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        image_buffer_9_ce0 : OUT STD_LOGIC;
        image_buffer_9_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        image_buffer_10_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        image_buffer_10_ce0 : OUT STD_LOGIC;
        image_buffer_10_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        image_buffer_11_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        image_buffer_11_ce0 : OUT STD_LOGIC;
        image_buffer_11_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        image_buffer_12_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        image_buffer_12_ce0 : OUT STD_LOGIC;
        image_buffer_12_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        image_buffer_13_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        image_buffer_13_ce0 : OUT STD_LOGIC;
        image_buffer_13_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        image_buffer_14_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        image_buffer_14_ce0 : OUT STD_LOGIC;
        image_buffer_14_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        image_buffer_15_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        image_buffer_15_ce0 : OUT STD_LOGIC;
        image_buffer_15_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        rst_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        rst_ce0 : OUT STD_LOGIC;
        rst_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        rst_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        rst_ce1 : OUT STD_LOGIC;
        rst_we1 : OUT STD_LOGIC;
        rst_d1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component color_hist_urem_1sc4 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (10 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (10 downto 0) );
    end component;


    component color_hist_mul_32tde IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component color_hist_urem_1udo IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (13 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component color_hist_mul_muvdy IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (13 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (29 downto 0) );
    end component;


    component color_hist_image_cud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component color_hist_rst IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        address1 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component color_hist_CONTROL_BUS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        imageptr : OUT STD_LOGIC_VECTOR (31 downto 0);
        feature_r : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component color_hist_SPECS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        specs_address0 : IN STD_LOGIC_VECTOR (1 downto 0);
        specs_ce0 : IN STD_LOGIC;
        specs_q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component color_hist_INPUT_IMAGE_m_axi IS
    generic (
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (7 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (0 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component color_hist_FEATURE_m_axi IS
    generic (
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (1 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    color_hist_CONTROL_BUS_s_axi_U : component color_hist_CONTROL_BUS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_BUS_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_BUS_DATA_WIDTH)
    port map (
        AWVALID => s_axi_CONTROL_BUS_AWVALID,
        AWREADY => s_axi_CONTROL_BUS_AWREADY,
        AWADDR => s_axi_CONTROL_BUS_AWADDR,
        WVALID => s_axi_CONTROL_BUS_WVALID,
        WREADY => s_axi_CONTROL_BUS_WREADY,
        WDATA => s_axi_CONTROL_BUS_WDATA,
        WSTRB => s_axi_CONTROL_BUS_WSTRB,
        ARVALID => s_axi_CONTROL_BUS_ARVALID,
        ARREADY => s_axi_CONTROL_BUS_ARREADY,
        ARADDR => s_axi_CONTROL_BUS_ARADDR,
        RVALID => s_axi_CONTROL_BUS_RVALID,
        RREADY => s_axi_CONTROL_BUS_RREADY,
        RDATA => s_axi_CONTROL_BUS_RDATA,
        RRESP => s_axi_CONTROL_BUS_RRESP,
        BVALID => s_axi_CONTROL_BUS_BVALID,
        BREADY => s_axi_CONTROL_BUS_BREADY,
        BRESP => s_axi_CONTROL_BUS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        imageptr => imageptr,
        feature_r => feature_r);

    color_hist_SPECS_s_axi_U : component color_hist_SPECS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_SPECS_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_SPECS_DATA_WIDTH)
    port map (
        AWVALID => s_axi_SPECS_AWVALID,
        AWREADY => s_axi_SPECS_AWREADY,
        AWADDR => s_axi_SPECS_AWADDR,
        WVALID => s_axi_SPECS_WVALID,
        WREADY => s_axi_SPECS_WREADY,
        WDATA => s_axi_SPECS_WDATA,
        WSTRB => s_axi_SPECS_WSTRB,
        ARVALID => s_axi_SPECS_ARVALID,
        ARREADY => s_axi_SPECS_ARREADY,
        ARADDR => s_axi_SPECS_ARADDR,
        RVALID => s_axi_SPECS_RVALID,
        RREADY => s_axi_SPECS_RREADY,
        RDATA => s_axi_SPECS_RDATA,
        RRESP => s_axi_SPECS_RRESP,
        BVALID => s_axi_SPECS_BVALID,
        BREADY => s_axi_SPECS_BREADY,
        BRESP => s_axi_SPECS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        specs_address0 => specs_address0,
        specs_ce0 => specs_ce0,
        specs_q0 => specs_q0);

    color_hist_INPUT_IMAGE_m_axi_U : component color_hist_INPUT_IMAGE_m_axi
    generic map (
        USER_DW => 8,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_INPUT_IMAGE_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_INPUT_IMAGE_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_INPUT_IMAGE_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_INPUT_IMAGE_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_INPUT_IMAGE_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_INPUT_IMAGE_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_INPUT_IMAGE_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_INPUT_IMAGE_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_INPUT_IMAGE_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_INPUT_IMAGE_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_INPUT_IMAGE_CACHE_VALUE)
    port map (
        AWVALID => m_axi_INPUT_IMAGE_AWVALID,
        AWREADY => m_axi_INPUT_IMAGE_AWREADY,
        AWADDR => m_axi_INPUT_IMAGE_AWADDR,
        AWID => m_axi_INPUT_IMAGE_AWID,
        AWLEN => m_axi_INPUT_IMAGE_AWLEN,
        AWSIZE => m_axi_INPUT_IMAGE_AWSIZE,
        AWBURST => m_axi_INPUT_IMAGE_AWBURST,
        AWLOCK => m_axi_INPUT_IMAGE_AWLOCK,
        AWCACHE => m_axi_INPUT_IMAGE_AWCACHE,
        AWPROT => m_axi_INPUT_IMAGE_AWPROT,
        AWQOS => m_axi_INPUT_IMAGE_AWQOS,
        AWREGION => m_axi_INPUT_IMAGE_AWREGION,
        AWUSER => m_axi_INPUT_IMAGE_AWUSER,
        WVALID => m_axi_INPUT_IMAGE_WVALID,
        WREADY => m_axi_INPUT_IMAGE_WREADY,
        WDATA => m_axi_INPUT_IMAGE_WDATA,
        WSTRB => m_axi_INPUT_IMAGE_WSTRB,
        WLAST => m_axi_INPUT_IMAGE_WLAST,
        WID => m_axi_INPUT_IMAGE_WID,
        WUSER => m_axi_INPUT_IMAGE_WUSER,
        ARVALID => m_axi_INPUT_IMAGE_ARVALID,
        ARREADY => m_axi_INPUT_IMAGE_ARREADY,
        ARADDR => m_axi_INPUT_IMAGE_ARADDR,
        ARID => m_axi_INPUT_IMAGE_ARID,
        ARLEN => m_axi_INPUT_IMAGE_ARLEN,
        ARSIZE => m_axi_INPUT_IMAGE_ARSIZE,
        ARBURST => m_axi_INPUT_IMAGE_ARBURST,
        ARLOCK => m_axi_INPUT_IMAGE_ARLOCK,
        ARCACHE => m_axi_INPUT_IMAGE_ARCACHE,
        ARPROT => m_axi_INPUT_IMAGE_ARPROT,
        ARQOS => m_axi_INPUT_IMAGE_ARQOS,
        ARREGION => m_axi_INPUT_IMAGE_ARREGION,
        ARUSER => m_axi_INPUT_IMAGE_ARUSER,
        RVALID => m_axi_INPUT_IMAGE_RVALID,
        RREADY => m_axi_INPUT_IMAGE_RREADY,
        RDATA => m_axi_INPUT_IMAGE_RDATA,
        RLAST => m_axi_INPUT_IMAGE_RLAST,
        RID => m_axi_INPUT_IMAGE_RID,
        RUSER => m_axi_INPUT_IMAGE_RUSER,
        RRESP => m_axi_INPUT_IMAGE_RRESP,
        BVALID => m_axi_INPUT_IMAGE_BVALID,
        BREADY => m_axi_INPUT_IMAGE_BREADY,
        BRESP => m_axi_INPUT_IMAGE_BRESP,
        BID => m_axi_INPUT_IMAGE_BID,
        BUSER => m_axi_INPUT_IMAGE_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => INPUT_IMAGE_ARVALID,
        I_ARREADY => INPUT_IMAGE_ARREADY,
        I_ARADDR => ap_reg_pp0_iter14_INPUT_IMAGE_addr_reg_1049,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_60,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => INPUT_IMAGE_RVALID,
        I_RREADY => INPUT_IMAGE_RREADY,
        I_RDATA => INPUT_IMAGE_RDATA,
        I_RID => INPUT_IMAGE_RID,
        I_RUSER => INPUT_IMAGE_RUSER,
        I_RRESP => INPUT_IMAGE_RRESP,
        I_RLAST => INPUT_IMAGE_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => INPUT_IMAGE_AWREADY,
        I_AWADDR => ap_const_lv32_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => INPUT_IMAGE_WREADY,
        I_WDATA => ap_const_lv8_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv1_0,
        I_BVALID => INPUT_IMAGE_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => INPUT_IMAGE_BRESP,
        I_BID => INPUT_IMAGE_BID,
        I_BUSER => INPUT_IMAGE_BUSER);

    color_hist_FEATURE_m_axi_U : component color_hist_FEATURE_m_axi
    generic map (
        USER_DW => 16,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_FEATURE_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_FEATURE_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_FEATURE_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_FEATURE_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_FEATURE_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_FEATURE_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_FEATURE_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_FEATURE_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_FEATURE_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_FEATURE_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_FEATURE_CACHE_VALUE)
    port map (
        AWVALID => m_axi_FEATURE_AWVALID,
        AWREADY => m_axi_FEATURE_AWREADY,
        AWADDR => m_axi_FEATURE_AWADDR,
        AWID => m_axi_FEATURE_AWID,
        AWLEN => m_axi_FEATURE_AWLEN,
        AWSIZE => m_axi_FEATURE_AWSIZE,
        AWBURST => m_axi_FEATURE_AWBURST,
        AWLOCK => m_axi_FEATURE_AWLOCK,
        AWCACHE => m_axi_FEATURE_AWCACHE,
        AWPROT => m_axi_FEATURE_AWPROT,
        AWQOS => m_axi_FEATURE_AWQOS,
        AWREGION => m_axi_FEATURE_AWREGION,
        AWUSER => m_axi_FEATURE_AWUSER,
        WVALID => m_axi_FEATURE_WVALID,
        WREADY => m_axi_FEATURE_WREADY,
        WDATA => m_axi_FEATURE_WDATA,
        WSTRB => m_axi_FEATURE_WSTRB,
        WLAST => m_axi_FEATURE_WLAST,
        WID => m_axi_FEATURE_WID,
        WUSER => m_axi_FEATURE_WUSER,
        ARVALID => m_axi_FEATURE_ARVALID,
        ARREADY => m_axi_FEATURE_ARREADY,
        ARADDR => m_axi_FEATURE_ARADDR,
        ARID => m_axi_FEATURE_ARID,
        ARLEN => m_axi_FEATURE_ARLEN,
        ARSIZE => m_axi_FEATURE_ARSIZE,
        ARBURST => m_axi_FEATURE_ARBURST,
        ARLOCK => m_axi_FEATURE_ARLOCK,
        ARCACHE => m_axi_FEATURE_ARCACHE,
        ARPROT => m_axi_FEATURE_ARPROT,
        ARQOS => m_axi_FEATURE_ARQOS,
        ARREGION => m_axi_FEATURE_ARREGION,
        ARUSER => m_axi_FEATURE_ARUSER,
        RVALID => m_axi_FEATURE_RVALID,
        RREADY => m_axi_FEATURE_RREADY,
        RDATA => m_axi_FEATURE_RDATA,
        RLAST => m_axi_FEATURE_RLAST,
        RID => m_axi_FEATURE_RID,
        RUSER => m_axi_FEATURE_RUSER,
        RRESP => m_axi_FEATURE_RRESP,
        BVALID => m_axi_FEATURE_BVALID,
        BREADY => m_axi_FEATURE_BREADY,
        BRESP => m_axi_FEATURE_BRESP,
        BID => m_axi_FEATURE_BID,
        BUSER => m_axi_FEATURE_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => ap_const_logic_0,
        I_ARREADY => FEATURE_ARREADY,
        I_ARADDR => ap_const_lv32_0,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_0,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => FEATURE_RVALID,
        I_RREADY => ap_const_logic_0,
        I_RDATA => FEATURE_RDATA,
        I_RID => FEATURE_RID,
        I_RUSER => FEATURE_RUSER,
        I_RRESP => FEATURE_RRESP,
        I_RLAST => FEATURE_RLAST,
        I_AWVALID => FEATURE_AWVALID,
        I_AWREADY => FEATURE_AWREADY,
        I_AWADDR => FEATURE_addr_reg_956,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_24,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => FEATURE_WVALID,
        I_WREADY => FEATURE_WREADY,
        I_WDATA => rst_load_reg_1110,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv2_3,
        I_BVALID => FEATURE_BVALID,
        I_BREADY => FEATURE_BREADY,
        I_BRESP => FEATURE_BRESP,
        I_BID => FEATURE_BID,
        I_BUSER => FEATURE_BUSER);

    image_buffer_0_U : component color_hist_image_cud
    generic map (
        DataWidth => 8,
        AddressRange => 96,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => image_buffer_0_address0,
        ce0 => image_buffer_0_ce0,
        we0 => image_buffer_0_we0,
        d0 => INPUT_IMAGE_addr_rea_reg_1063,
        q0 => image_buffer_0_q0);

    image_buffer_1_U : component color_hist_image_cud
    generic map (
        DataWidth => 8,
        AddressRange => 96,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => image_buffer_1_address0,
        ce0 => image_buffer_1_ce0,
        we0 => image_buffer_1_we0,
        d0 => INPUT_IMAGE_addr_rea_reg_1063,
        q0 => image_buffer_1_q0);

    image_buffer_2_U : component color_hist_image_cud
    generic map (
        DataWidth => 8,
        AddressRange => 96,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => image_buffer_2_address0,
        ce0 => image_buffer_2_ce0,
        we0 => image_buffer_2_we0,
        d0 => INPUT_IMAGE_addr_rea_reg_1063,
        q0 => image_buffer_2_q0);

    image_buffer_3_U : component color_hist_image_cud
    generic map (
        DataWidth => 8,
        AddressRange => 96,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => image_buffer_3_address0,
        ce0 => image_buffer_3_ce0,
        we0 => image_buffer_3_we0,
        d0 => INPUT_IMAGE_addr_rea_reg_1063,
        q0 => image_buffer_3_q0);

    image_buffer_4_U : component color_hist_image_cud
    generic map (
        DataWidth => 8,
        AddressRange => 96,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => image_buffer_4_address0,
        ce0 => image_buffer_4_ce0,
        we0 => image_buffer_4_we0,
        d0 => INPUT_IMAGE_addr_rea_reg_1063,
        q0 => image_buffer_4_q0);

    image_buffer_5_U : component color_hist_image_cud
    generic map (
        DataWidth => 8,
        AddressRange => 96,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => image_buffer_5_address0,
        ce0 => image_buffer_5_ce0,
        we0 => image_buffer_5_we0,
        d0 => INPUT_IMAGE_addr_rea_reg_1063,
        q0 => image_buffer_5_q0);

    image_buffer_6_U : component color_hist_image_cud
    generic map (
        DataWidth => 8,
        AddressRange => 96,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => image_buffer_6_address0,
        ce0 => image_buffer_6_ce0,
        we0 => image_buffer_6_we0,
        d0 => INPUT_IMAGE_addr_rea_reg_1063,
        q0 => image_buffer_6_q0);

    image_buffer_7_U : component color_hist_image_cud
    generic map (
        DataWidth => 8,
        AddressRange => 96,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => image_buffer_7_address0,
        ce0 => image_buffer_7_ce0,
        we0 => image_buffer_7_we0,
        d0 => INPUT_IMAGE_addr_rea_reg_1063,
        q0 => image_buffer_7_q0);

    image_buffer_8_U : component color_hist_image_cud
    generic map (
        DataWidth => 8,
        AddressRange => 96,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => image_buffer_8_address0,
        ce0 => image_buffer_8_ce0,
        we0 => image_buffer_8_we0,
        d0 => INPUT_IMAGE_addr_rea_reg_1063,
        q0 => image_buffer_8_q0);

    image_buffer_9_U : component color_hist_image_cud
    generic map (
        DataWidth => 8,
        AddressRange => 96,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => image_buffer_9_address0,
        ce0 => image_buffer_9_ce0,
        we0 => image_buffer_9_we0,
        d0 => INPUT_IMAGE_addr_rea_reg_1063,
        q0 => image_buffer_9_q0);

    image_buffer_10_U : component color_hist_image_cud
    generic map (
        DataWidth => 8,
        AddressRange => 96,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => image_buffer_10_address0,
        ce0 => image_buffer_10_ce0,
        we0 => image_buffer_10_we0,
        d0 => INPUT_IMAGE_addr_rea_reg_1063,
        q0 => image_buffer_10_q0);

    image_buffer_11_U : component color_hist_image_cud
    generic map (
        DataWidth => 8,
        AddressRange => 96,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => image_buffer_11_address0,
        ce0 => image_buffer_11_ce0,
        we0 => image_buffer_11_we0,
        d0 => INPUT_IMAGE_addr_rea_reg_1063,
        q0 => image_buffer_11_q0);

    image_buffer_12_U : component color_hist_image_cud
    generic map (
        DataWidth => 8,
        AddressRange => 96,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => image_buffer_12_address0,
        ce0 => image_buffer_12_ce0,
        we0 => image_buffer_12_we0,
        d0 => INPUT_IMAGE_addr_rea_reg_1063,
        q0 => image_buffer_12_q0);

    image_buffer_13_U : component color_hist_image_cud
    generic map (
        DataWidth => 8,
        AddressRange => 96,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => image_buffer_13_address0,
        ce0 => image_buffer_13_ce0,
        we0 => image_buffer_13_we0,
        d0 => INPUT_IMAGE_addr_rea_reg_1063,
        q0 => image_buffer_13_q0);

    image_buffer_14_U : component color_hist_image_cud
    generic map (
        DataWidth => 8,
        AddressRange => 96,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => image_buffer_14_address0,
        ce0 => image_buffer_14_ce0,
        we0 => image_buffer_14_we0,
        d0 => INPUT_IMAGE_addr_rea_reg_1063,
        q0 => image_buffer_14_q0);

    image_buffer_15_U : component color_hist_image_cud
    generic map (
        DataWidth => 8,
        AddressRange => 96,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => image_buffer_15_address0,
        ce0 => image_buffer_15_ce0,
        we0 => image_buffer_15_we0,
        d0 => INPUT_IMAGE_addr_rea_reg_1063,
        q0 => image_buffer_15_q0);

    rst_U : component color_hist_rst
    generic map (
        DataWidth => 16,
        AddressRange => 36,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => rst_address0,
        ce0 => rst_ce0,
        we0 => rst_we0,
        d0 => ap_const_lv16_0,
        q0 => rst_q0,
        address1 => grp_calc_hist_fu_580_rst_address1,
        ce1 => rst_ce1,
        we1 => rst_we1,
        d1 => grp_calc_hist_fu_580_rst_d1);

    grp_calc_hist_fu_580 : component calc_hist
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_calc_hist_fu_580_ap_start,
        ap_done => grp_calc_hist_fu_580_ap_done,
        ap_idle => grp_calc_hist_fu_580_ap_idle,
        ap_ready => grp_calc_hist_fu_580_ap_ready,
        image_buffer_0_address0 => grp_calc_hist_fu_580_image_buffer_0_address0,
        image_buffer_0_ce0 => grp_calc_hist_fu_580_image_buffer_0_ce0,
        image_buffer_0_q0 => image_buffer_0_q0,
        image_buffer_1_address0 => grp_calc_hist_fu_580_image_buffer_1_address0,
        image_buffer_1_ce0 => grp_calc_hist_fu_580_image_buffer_1_ce0,
        image_buffer_1_q0 => image_buffer_1_q0,
        image_buffer_2_address0 => grp_calc_hist_fu_580_image_buffer_2_address0,
        image_buffer_2_ce0 => grp_calc_hist_fu_580_image_buffer_2_ce0,
        image_buffer_2_q0 => image_buffer_2_q0,
        image_buffer_3_address0 => grp_calc_hist_fu_580_image_buffer_3_address0,
        image_buffer_3_ce0 => grp_calc_hist_fu_580_image_buffer_3_ce0,
        image_buffer_3_q0 => image_buffer_3_q0,
        image_buffer_4_address0 => grp_calc_hist_fu_580_image_buffer_4_address0,
        image_buffer_4_ce0 => grp_calc_hist_fu_580_image_buffer_4_ce0,
        image_buffer_4_q0 => image_buffer_4_q0,
        image_buffer_5_address0 => grp_calc_hist_fu_580_image_buffer_5_address0,
        image_buffer_5_ce0 => grp_calc_hist_fu_580_image_buffer_5_ce0,
        image_buffer_5_q0 => image_buffer_5_q0,
        image_buffer_6_address0 => grp_calc_hist_fu_580_image_buffer_6_address0,
        image_buffer_6_ce0 => grp_calc_hist_fu_580_image_buffer_6_ce0,
        image_buffer_6_q0 => image_buffer_6_q0,
        image_buffer_7_address0 => grp_calc_hist_fu_580_image_buffer_7_address0,
        image_buffer_7_ce0 => grp_calc_hist_fu_580_image_buffer_7_ce0,
        image_buffer_7_q0 => image_buffer_7_q0,
        image_buffer_8_address0 => grp_calc_hist_fu_580_image_buffer_8_address0,
        image_buffer_8_ce0 => grp_calc_hist_fu_580_image_buffer_8_ce0,
        image_buffer_8_q0 => image_buffer_8_q0,
        image_buffer_9_address0 => grp_calc_hist_fu_580_image_buffer_9_address0,
        image_buffer_9_ce0 => grp_calc_hist_fu_580_image_buffer_9_ce0,
        image_buffer_9_q0 => image_buffer_9_q0,
        image_buffer_10_address0 => grp_calc_hist_fu_580_image_buffer_10_address0,
        image_buffer_10_ce0 => grp_calc_hist_fu_580_image_buffer_10_ce0,
        image_buffer_10_q0 => image_buffer_10_q0,
        image_buffer_11_address0 => grp_calc_hist_fu_580_image_buffer_11_address0,
        image_buffer_11_ce0 => grp_calc_hist_fu_580_image_buffer_11_ce0,
        image_buffer_11_q0 => image_buffer_11_q0,
        image_buffer_12_address0 => grp_calc_hist_fu_580_image_buffer_12_address0,
        image_buffer_12_ce0 => grp_calc_hist_fu_580_image_buffer_12_ce0,
        image_buffer_12_q0 => image_buffer_12_q0,
        image_buffer_13_address0 => grp_calc_hist_fu_580_image_buffer_13_address0,
        image_buffer_13_ce0 => grp_calc_hist_fu_580_image_buffer_13_ce0,
        image_buffer_13_q0 => image_buffer_13_q0,
        image_buffer_14_address0 => grp_calc_hist_fu_580_image_buffer_14_address0,
        image_buffer_14_ce0 => grp_calc_hist_fu_580_image_buffer_14_ce0,
        image_buffer_14_q0 => image_buffer_14_q0,
        image_buffer_15_address0 => grp_calc_hist_fu_580_image_buffer_15_address0,
        image_buffer_15_ce0 => grp_calc_hist_fu_580_image_buffer_15_ce0,
        image_buffer_15_q0 => image_buffer_15_q0,
        rst_address0 => grp_calc_hist_fu_580_rst_address0,
        rst_ce0 => grp_calc_hist_fu_580_rst_ce0,
        rst_q0 => rst_q0,
        rst_address1 => grp_calc_hist_fu_580_rst_address1,
        rst_ce1 => grp_calc_hist_fu_580_rst_ce1,
        rst_we1 => grp_calc_hist_fu_580_rst_we1,
        rst_d1 => grp_calc_hist_fu_580_rst_d1);

    color_hist_urem_1sc4_U20 : component color_hist_urem_1sc4
    generic map (
        ID => 1,
        NUM_STAGE => 15,
        din0_WIDTH => 11,
        din1_WIDTH => 8,
        dout_WIDTH => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => ap_phi_mux_indvar_flatten_phi_fu_528_p4,
        din1 => grp_fu_765_p1,
        ce => grp_fu_765_ce,
        dout => grp_fu_765_p2);

    color_hist_mul_32tde_U21 : component color_hist_mul_32tde
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tmp_reg_973,
        din1 => original_width_reg_967,
        ce => grp_fu_771_ce,
        dout => grp_fu_771_p2);

    color_hist_mul_32tde_U22 : component color_hist_mul_32tde
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tmp_mid1_reg_997,
        din1 => original_width_reg_967,
        ce => grp_fu_775_ce,
        dout => grp_fu_775_p2);

    color_hist_urem_1udo_U23 : component color_hist_urem_1udo
    generic map (
        ID => 1,
        NUM_STAGE => 18,
        din0_WIDTH => 14,
        din1_WIDTH => 8,
        dout_WIDTH => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => ap_reg_pp0_iter4_tmp_9_reg_1017,
        din1 => grp_fu_794_p1,
        ce => grp_fu_794_ce,
        dout => grp_fu_794_p2);

    color_hist_mul_muvdy_U24 : component color_hist_mul_muvdy
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 14,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_922_p0,
        din1 => grp_fu_922_p1,
        ce => grp_fu_922_ce,
        dout => grp_fu_922_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond_flatten_fu_668_p2 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter18 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter19 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter20 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter21 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter22_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter22 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter23_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter23 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    ap_enable_reg_pp0_iter23 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter6_state11)) then 
                        ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter5;
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state33) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((not(((grp_calc_hist_fu_580_ap_done = ap_const_logic_0) or (ap_sig_ioackin_FEATURE_AWREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state32))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state33)) then 
                        ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state33);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                elsif ((not(((grp_calc_hist_fu_580_ap_done = ap_const_logic_0) or (ap_sig_ioackin_FEATURE_AWREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state32))) then 
                    ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_calc_hist_fu_580_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_grp_calc_hist_fu_580_ap_start <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
                    ap_reg_grp_calc_hist_fu_580_ap_start <= ap_const_logic_1;
                elsif ((grp_calc_hist_fu_580_ap_ready = ap_const_logic_1)) then 
                    ap_reg_grp_calc_hist_fu_580_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_FEATURE_AWREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_FEATURE_AWREADY <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state32)) then
                    if (not(((grp_calc_hist_fu_580_ap_done = ap_const_logic_0) or (ap_sig_ioackin_FEATURE_AWREADY = ap_const_logic_0)))) then 
                        ap_reg_ioackin_FEATURE_AWREADY <= ap_const_logic_0;
                    elsif (((grp_calc_hist_fu_580_ap_done = ap_const_logic_1) and (ap_const_logic_1 = FEATURE_AWREADY))) then 
                        ap_reg_ioackin_FEATURE_AWREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_FEATURE_WREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_FEATURE_WREADY <= ap_const_logic_0;
            else
                if (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_reg_pp1_iter1_exitcond2_reg_1096 = ap_const_lv1_0))) then
                    if ((ap_const_boolean_0 = ap_block_pp1_stage0_11001)) then 
                        ap_reg_ioackin_FEATURE_WREADY <= ap_const_logic_0;
                    elsif (((ap_const_logic_1 = FEATURE_WREADY) and (ap_const_boolean_0 = ap_block_pp1_stage0_01001))) then 
                        ap_reg_ioackin_FEATURE_WREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_INPUT_IMAGE_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_INPUT_IMAGE_ARREADY <= ap_const_logic_0;
            else
                if (((ap_enable_reg_pp0_iter15 = ap_const_logic_1) and (tmp_16_reg_1059 = ap_const_lv1_1))) then
                    if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then 
                        ap_reg_ioackin_INPUT_IMAGE_ARREADY <= ap_const_logic_0;
                    elsif (((ap_const_logic_1 = INPUT_IMAGE_ARREADY) and (ap_const_boolean_0 = ap_block_pp0_stage0_01001))) then 
                        ap_reg_ioackin_INPUT_IMAGE_ARREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    i_reg_536_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond_flatten_fu_668_p2 = ap_const_lv1_0))) then 
                i_reg_536 <= i_mid2_fu_751_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                i_reg_536 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    indvar8_reg_569_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (exitcond2_fu_905_p2 = ap_const_lv1_0))) then 
                indvar8_reg_569 <= indvar_next9_fu_911_p2;
            elsif ((not(((grp_calc_hist_fu_580_ap_done = ap_const_logic_0) or (ap_sig_ioackin_FEATURE_AWREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state32))) then 
                indvar8_reg_569 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_524_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond_flatten_reg_978 = ap_const_lv1_0))) then 
                indvar_flatten_reg_524 <= indvar_flatten_next_reg_982;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                indvar_flatten_reg_524 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    indvar_reg_547_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond_flatten_fu_668_p2 = ap_const_lv1_0))) then 
                indvar_reg_547 <= indvar_next_fu_759_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                indvar_reg_547 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    invdar_reg_558_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
                invdar_reg_558 <= ap_const_lv6_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state30) and (tmp_5_fu_899_p2 = ap_const_lv1_0))) then 
                invdar_reg_558 <= indvarinc_fu_888_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                    FEATURE_addr_reg_956(30 downto 0) <= tmp_3_fu_611_p1(32 - 1 downto 0)(30 downto 0);
                original_width_reg_967 <= specs_q0;
                tmp_10_cast_reg_962 <= tmp_10_cast_fu_621_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                INPUT_IMAGE_addr_rea_reg_1063 <= INPUT_IMAGE_RDATA;
                ap_reg_pp0_iter10_INPUT_IMAGE_addr_reg_1049 <= ap_reg_pp0_iter9_INPUT_IMAGE_addr_reg_1049;
                ap_reg_pp0_iter10_exitcond_flatten_reg_978 <= ap_reg_pp0_iter9_exitcond_flatten_reg_978;
                ap_reg_pp0_iter10_tmp_t_reg_1055 <= ap_reg_pp0_iter9_tmp_t_reg_1055;
                ap_reg_pp0_iter11_INPUT_IMAGE_addr_reg_1049 <= ap_reg_pp0_iter10_INPUT_IMAGE_addr_reg_1049;
                ap_reg_pp0_iter11_exitcond_flatten_reg_978 <= ap_reg_pp0_iter10_exitcond_flatten_reg_978;
                ap_reg_pp0_iter11_tmp_t_reg_1055 <= ap_reg_pp0_iter10_tmp_t_reg_1055;
                ap_reg_pp0_iter12_INPUT_IMAGE_addr_reg_1049 <= ap_reg_pp0_iter11_INPUT_IMAGE_addr_reg_1049;
                ap_reg_pp0_iter12_exitcond_flatten_reg_978 <= ap_reg_pp0_iter11_exitcond_flatten_reg_978;
                ap_reg_pp0_iter12_tmp_t_reg_1055 <= ap_reg_pp0_iter11_tmp_t_reg_1055;
                ap_reg_pp0_iter13_INPUT_IMAGE_addr_reg_1049 <= ap_reg_pp0_iter12_INPUT_IMAGE_addr_reg_1049;
                ap_reg_pp0_iter13_exitcond_flatten_reg_978 <= ap_reg_pp0_iter12_exitcond_flatten_reg_978;
                ap_reg_pp0_iter13_tmp_t_reg_1055 <= ap_reg_pp0_iter12_tmp_t_reg_1055;
                ap_reg_pp0_iter14_INPUT_IMAGE_addr_reg_1049 <= ap_reg_pp0_iter13_INPUT_IMAGE_addr_reg_1049;
                ap_reg_pp0_iter14_tmp_t_reg_1055 <= ap_reg_pp0_iter13_tmp_t_reg_1055;
                ap_reg_pp0_iter15_tmp_t_reg_1055 <= ap_reg_pp0_iter14_tmp_t_reg_1055;
                ap_reg_pp0_iter16_tmp_t_reg_1055 <= ap_reg_pp0_iter15_tmp_t_reg_1055;
                ap_reg_pp0_iter17_tmp_t_reg_1055 <= ap_reg_pp0_iter16_tmp_t_reg_1055;
                ap_reg_pp0_iter18_tmp_t_reg_1055 <= ap_reg_pp0_iter17_tmp_t_reg_1055;
                ap_reg_pp0_iter19_tmp_t_reg_1055 <= ap_reg_pp0_iter18_tmp_t_reg_1055;
                ap_reg_pp0_iter20_tmp_t_reg_1055 <= ap_reg_pp0_iter19_tmp_t_reg_1055;
                ap_reg_pp0_iter21_tmp_t_reg_1055 <= ap_reg_pp0_iter20_tmp_t_reg_1055;
                ap_reg_pp0_iter22_tmp_t_reg_1055 <= ap_reg_pp0_iter21_tmp_t_reg_1055;
                ap_reg_pp0_iter2_exitcond_flatten_reg_978 <= ap_reg_pp0_iter1_exitcond_flatten_reg_978;
                ap_reg_pp0_iter2_exitcond_reg_987 <= ap_reg_pp0_iter1_exitcond_reg_987;
                ap_reg_pp0_iter2_tmp_9_reg_1017 <= tmp_9_reg_1017;
                ap_reg_pp0_iter3_exitcond_flatten_reg_978 <= ap_reg_pp0_iter2_exitcond_flatten_reg_978;
                ap_reg_pp0_iter3_exitcond_reg_987 <= ap_reg_pp0_iter2_exitcond_reg_987;
                ap_reg_pp0_iter3_tmp_9_reg_1017 <= ap_reg_pp0_iter2_tmp_9_reg_1017;
                ap_reg_pp0_iter4_exitcond_flatten_reg_978 <= ap_reg_pp0_iter3_exitcond_flatten_reg_978;
                ap_reg_pp0_iter4_exitcond_reg_987 <= ap_reg_pp0_iter3_exitcond_reg_987;
                ap_reg_pp0_iter4_tmp_9_reg_1017 <= ap_reg_pp0_iter3_tmp_9_reg_1017;
                ap_reg_pp0_iter5_exitcond_flatten_reg_978 <= ap_reg_pp0_iter4_exitcond_flatten_reg_978;
                ap_reg_pp0_iter5_exitcond_reg_987 <= ap_reg_pp0_iter4_exitcond_reg_987;
                ap_reg_pp0_iter6_exitcond_flatten_reg_978 <= ap_reg_pp0_iter5_exitcond_flatten_reg_978;
                ap_reg_pp0_iter6_exitcond_reg_987 <= ap_reg_pp0_iter5_exitcond_reg_987;
                ap_reg_pp0_iter7_exitcond_flatten_reg_978 <= ap_reg_pp0_iter6_exitcond_flatten_reg_978;
                ap_reg_pp0_iter8_INPUT_IMAGE_addr_reg_1049 <= INPUT_IMAGE_addr_reg_1049;
                ap_reg_pp0_iter8_exitcond_flatten_reg_978 <= ap_reg_pp0_iter7_exitcond_flatten_reg_978;
                ap_reg_pp0_iter8_tmp_t_reg_1055 <= tmp_t_reg_1055;
                ap_reg_pp0_iter9_INPUT_IMAGE_addr_reg_1049 <= ap_reg_pp0_iter8_INPUT_IMAGE_addr_reg_1049;
                ap_reg_pp0_iter9_exitcond_flatten_reg_978 <= ap_reg_pp0_iter8_exitcond_flatten_reg_978;
                ap_reg_pp0_iter9_tmp_t_reg_1055 <= ap_reg_pp0_iter8_tmp_t_reg_1055;
                tmp_6_reg_1083 <= grp_fu_794_p2;
                tmp_t_reg_1055 <= grp_fu_922_p2(24 downto 21);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_reg_pp0_iter6_exitcond_flatten_reg_978 = ap_const_lv1_0))) then
                INPUT_IMAGE_addr_reg_1049 <= imageptr2_sum_cast_fu_844_p1(32 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_reg_pp0_iter1_exitcond_flatten_reg_978 <= exitcond_flatten_reg_978;
                ap_reg_pp0_iter1_exitcond_reg_987 <= exitcond_reg_987;
                exitcond_flatten_reg_978 <= exitcond_flatten_fu_668_p2;
                tmp_reg_973 <= tmp_fu_629_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                ap_reg_pp1_iter1_exitcond2_reg_1096 <= exitcond2_reg_1096;
                exitcond2_reg_1096 <= exitcond2_fu_905_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond_flatten_fu_668_p2 = ap_const_lv1_0))) then
                exitcond_reg_987 <= exitcond_fu_680_p2;
                indvar_mid2_reg_992 <= indvar_mid2_fu_686_p3;
                    tmp_8_cast_cast_mid2_1_reg_1002(11 downto 5) <= tmp_8_cast_cast_mid2_1_fu_743_p3(11 downto 5);
                tmp_mid1_reg_997 <= tmp_mid1_fu_704_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                indvar_flatten_next_reg_982 <= indvar_flatten_next_fu_674_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_reg_pp0_iter5_exitcond_reg_987 = ap_const_lv1_0))) then
                offset_reg_1038 <= offset_fu_809_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (exitcond2_reg_1096 = ap_const_lv1_0))) then
                rst_load_reg_1110 <= rst_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_reg_pp0_iter13_exitcond_flatten_reg_978 = ap_const_lv1_0))) then
                tmp_16_reg_1059 <= tmp_16_fu_863_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_reg_pp0_iter4_exitcond_flatten_reg_978 = ap_const_lv1_0) and (ap_reg_pp0_iter4_exitcond_reg_987 = ap_const_lv1_1))) then
                tmp_1_mid1_reg_1028 <= grp_fu_775_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_reg_pp0_iter4_exitcond_reg_987 = ap_const_lv1_0))) then
                tmp_1_reg_1023 <= grp_fu_771_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_reg_pp0_iter5_exitcond_flatten_reg_978 = ap_const_lv1_0) and (ap_reg_pp0_iter5_exitcond_reg_987 = ap_const_lv1_1))) then
                tmp_2_mid1_reg_1043 <= tmp_2_mid1_fu_815_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond_flatten_reg_978 = ap_const_lv1_0))) then
                tmp_9_reg_1017 <= tmp_9_fu_785_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                x_reg_945 <= specs_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                y_reg_934 <= specs_q0;
            end if;
        end if;
    end process;
    FEATURE_addr_reg_956(31) <= '0';
    tmp_8_cast_cast_mid2_1_reg_1002(4 downto 0) <= "00000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter22, ap_CS_fsm_state32, ap_enable_reg_pp1_iter2, ap_CS_fsm_state40, FEATURE_BVALID, ap_CS_fsm_state30, exitcond2_fu_905_p2, ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter23, ap_sig_ioackin_FEATURE_AWREADY, grp_calc_hist_fu_580_ap_done, ap_block_pp1_stage0_subdone, tmp_5_fu_899_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) and not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter23 = ap_const_logic_1) and (ap_enable_reg_pp0_iter22 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter23 = ap_const_logic_1) and (ap_enable_reg_pp0_iter22 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state29;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state30) and (tmp_5_fu_899_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state31;
                else
                    ap_NS_fsm <= ap_ST_fsm_state30;
                end if;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                if ((not(((grp_calc_hist_fu_580_ap_done = ap_const_logic_0) or (ap_sig_ioackin_FEATURE_AWREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state32))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state32;
                end if;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (exitcond2_fu_905_p2 = ap_const_lv1_1))) and not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (exitcond2_fu_905_p2 = ap_const_lv1_1)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state36;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                if (((ap_const_logic_1 = FEATURE_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state40))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state40;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXX";
        end case;
    end process;

    FEATURE_AWVALID_assign_proc : process(ap_CS_fsm_state32, grp_calc_hist_fu_580_ap_done, ap_reg_ioackin_FEATURE_AWREADY)
    begin
        if (((grp_calc_hist_fu_580_ap_done = ap_const_logic_1) and (ap_reg_ioackin_FEATURE_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state32))) then 
            FEATURE_AWVALID <= ap_const_logic_1;
        else 
            FEATURE_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    FEATURE_BREADY_assign_proc : process(ap_CS_fsm_state40, FEATURE_BVALID)
    begin
        if (((ap_const_logic_1 = FEATURE_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state40))) then 
            FEATURE_BREADY <= ap_const_logic_1;
        else 
            FEATURE_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    FEATURE_WVALID_assign_proc : process(ap_enable_reg_pp1_iter2, ap_reg_pp1_iter1_exitcond2_reg_1096, ap_reg_ioackin_FEATURE_WREADY, ap_block_pp1_stage0_01001)
    begin
        if (((ap_reg_ioackin_FEATURE_WREADY = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_reg_pp1_iter1_exitcond2_reg_1096 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_01001))) then 
            FEATURE_WVALID <= ap_const_logic_1;
        else 
            FEATURE_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    FEATURE_blk_n_AW_assign_proc : process(m_axi_FEATURE_AWREADY, ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            FEATURE_blk_n_AW <= m_axi_FEATURE_AWREADY;
        else 
            FEATURE_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    FEATURE_blk_n_B_assign_proc : process(m_axi_FEATURE_BVALID, ap_CS_fsm_state40)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            FEATURE_blk_n_B <= m_axi_FEATURE_BVALID;
        else 
            FEATURE_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    FEATURE_blk_n_W_assign_proc : process(m_axi_FEATURE_WREADY, ap_enable_reg_pp1_iter2, ap_block_pp1_stage0, ap_reg_pp1_iter1_exitcond2_reg_1096)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_reg_pp1_iter1_exitcond2_reg_1096 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            FEATURE_blk_n_W <= m_axi_FEATURE_WREADY;
        else 
            FEATURE_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;


    INPUT_IMAGE_ARVALID_assign_proc : process(ap_enable_reg_pp0_iter15, tmp_16_reg_1059, ap_reg_ioackin_INPUT_IMAGE_ARREADY, ap_block_pp0_stage0_01001)
    begin
        if (((ap_reg_ioackin_INPUT_IMAGE_ARREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_1) and (tmp_16_reg_1059 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_01001))) then 
            INPUT_IMAGE_ARVALID <= ap_const_logic_1;
        else 
            INPUT_IMAGE_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    INPUT_IMAGE_RREADY_assign_proc : process(ap_enable_reg_pp0_iter22, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter22 = ap_const_logic_1))) then 
            INPUT_IMAGE_RREADY <= ap_const_logic_1;
        else 
            INPUT_IMAGE_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    INPUT_IMAGE_blk_n_AR_assign_proc : process(m_axi_INPUT_IMAGE_ARREADY, ap_enable_reg_pp0_iter15, ap_block_pp0_stage0, tmp_16_reg_1059)
    begin
        if (((ap_enable_reg_pp0_iter15 = ap_const_logic_1) and (tmp_16_reg_1059 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            INPUT_IMAGE_blk_n_AR <= m_axi_INPUT_IMAGE_ARREADY;
        else 
            INPUT_IMAGE_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    INPUT_IMAGE_blk_n_R_assign_proc : process(m_axi_INPUT_IMAGE_RVALID, ap_block_pp0_stage0, ap_enable_reg_pp0_iter22)
    begin
        if (((ap_enable_reg_pp0_iter22 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            INPUT_IMAGE_blk_n_R <= m_axi_INPUT_IMAGE_RVALID;
        else 
            INPUT_IMAGE_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(4);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(9);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state29 <= ap_CS_fsm(5);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(6);
    ap_CS_fsm_state31 <= ap_CS_fsm(7);
    ap_CS_fsm_state32 <= ap_CS_fsm(8);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state40 <= ap_CS_fsm(14);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter22, INPUT_IMAGE_RVALID)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_const_logic_0 = INPUT_IMAGE_RVALID) and (ap_enable_reg_pp0_iter22 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter22, INPUT_IMAGE_RVALID, ap_block_state20_io)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_const_logic_0 = INPUT_IMAGE_RVALID) and (ap_enable_reg_pp0_iter22 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state20_io) and (ap_enable_reg_pp0_iter15 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter22, INPUT_IMAGE_RVALID, ap_block_state20_io)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_const_logic_0 = INPUT_IMAGE_RVALID) and (ap_enable_reg_pp0_iter22 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state20_io) and (ap_enable_reg_pp0_iter15 = ap_const_logic_1)));
    end process;

        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp1_stage0_11001_assign_proc : process(ap_enable_reg_pp1_iter2, ap_block_state35_io)
    begin
                ap_block_pp1_stage0_11001 <= ((ap_const_boolean_1 = ap_block_state35_io) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1));
    end process;


    ap_block_pp1_stage0_subdone_assign_proc : process(ap_enable_reg_pp1_iter2, ap_block_state35_io)
    begin
                ap_block_pp1_stage0_subdone <= ((ap_const_boolean_1 = ap_block_state35_io) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1));
    end process;

        ap_block_state10_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state20_io_assign_proc : process(tmp_16_reg_1059, ap_sig_ioackin_INPUT_IMAGE_ARREADY)
    begin
                ap_block_state20_io <= ((ap_sig_ioackin_INPUT_IMAGE_ARREADY = ap_const_logic_0) and (tmp_16_reg_1059 = ap_const_lv1_1));
    end process;

        ap_block_state20_pp0_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage0_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp0_stage0_iter18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp0_stage0_iter19 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp0_stage0_iter20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp0_stage0_iter21 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state27_pp0_stage0_iter22_assign_proc : process(INPUT_IMAGE_RVALID)
    begin
                ap_block_state27_pp0_stage0_iter22 <= (ap_const_logic_0 = INPUT_IMAGE_RVALID);
    end process;

        ap_block_state28_pp0_stage0_iter23 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state33_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state34_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state35_io_assign_proc : process(ap_reg_pp1_iter1_exitcond2_reg_1096, ap_sig_ioackin_FEATURE_WREADY)
    begin
                ap_block_state35_io <= ((ap_sig_ioackin_FEATURE_WREADY = ap_const_logic_0) and (ap_reg_pp1_iter1_exitcond2_reg_1096 = ap_const_lv1_0));
    end process;

        ap_block_state35_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter6_state11_assign_proc : process(ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0))) then 
            ap_condition_pp0_exit_iter6_state11 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter6_state11 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state33_assign_proc : process(exitcond2_fu_905_p2)
    begin
        if ((exitcond2_fu_905_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state33 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state33 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state40, FEATURE_BVALID)
    begin
        if (((ap_const_logic_1 = FEATURE_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state40))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter22, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21, ap_enable_reg_pp0_iter23)
    begin
        if (((ap_enable_reg_pp0_iter23 = ap_const_logic_0) and (ap_enable_reg_pp0_iter21 = ap_const_logic_0) and (ap_enable_reg_pp0_iter20 = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter22 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter2, ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten_phi_fu_528_p4_assign_proc : process(ap_block_pp0_stage0, indvar_flatten_reg_524, ap_CS_fsm_pp0_stage0, exitcond_flatten_reg_978, indvar_flatten_next_reg_982, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond_flatten_reg_978 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_indvar_flatten_phi_fu_528_p4 <= indvar_flatten_next_reg_982;
        else 
            ap_phi_mux_indvar_flatten_phi_fu_528_p4 <= indvar_flatten_reg_524;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state40, FEATURE_BVALID)
    begin
        if (((ap_const_logic_1 = FEATURE_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state40))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    ap_sig_ioackin_FEATURE_AWREADY_assign_proc : process(FEATURE_AWREADY, ap_reg_ioackin_FEATURE_AWREADY)
    begin
        if ((ap_reg_ioackin_FEATURE_AWREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_FEATURE_AWREADY <= FEATURE_AWREADY;
        else 
            ap_sig_ioackin_FEATURE_AWREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_FEATURE_WREADY_assign_proc : process(FEATURE_WREADY, ap_reg_ioackin_FEATURE_WREADY)
    begin
        if ((ap_reg_ioackin_FEATURE_WREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_FEATURE_WREADY <= FEATURE_WREADY;
        else 
            ap_sig_ioackin_FEATURE_WREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_INPUT_IMAGE_ARREADY_assign_proc : process(INPUT_IMAGE_ARREADY, ap_reg_ioackin_INPUT_IMAGE_ARREADY)
    begin
        if ((ap_reg_ioackin_INPUT_IMAGE_ARREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_INPUT_IMAGE_ARREADY <= INPUT_IMAGE_ARREADY;
        else 
            ap_sig_ioackin_INPUT_IMAGE_ARREADY <= ap_const_logic_1;
        end if; 
    end process;

    exitcond2_fu_905_p2 <= "1" when (indvar8_reg_569 = ap_const_lv6_24) else "0";
    exitcond_flatten_fu_668_p2 <= "1" when (ap_phi_mux_indvar_flatten_phi_fu_528_p4 = ap_const_lv11_600) else "0";
    exitcond_fu_680_p2 <= "1" when (indvar_reg_547 = ap_const_lv7_60) else "0";
    feature3_fu_601_p4 <= feature_r(31 downto 1);
    grp_calc_hist_fu_580_ap_start <= ap_reg_grp_calc_hist_fu_580_ap_start;

    grp_fu_765_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_765_ce <= ap_const_logic_1;
        else 
            grp_fu_765_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_765_p1 <= ap_const_lv11_60(8 - 1 downto 0);

    grp_fu_771_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_771_ce <= ap_const_logic_1;
        else 
            grp_fu_771_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_775_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_775_ce <= ap_const_logic_1;
        else 
            grp_fu_775_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_794_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_794_ce <= ap_const_logic_1;
        else 
            grp_fu_794_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_794_p1 <= ap_const_lv14_60(8 - 1 downto 0);

    grp_fu_922_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_922_ce <= ap_const_logic_1;
        else 
            grp_fu_922_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_922_p0 <= grp_fu_922_p00(14 - 1 downto 0);
    grp_fu_922_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_reg_pp0_iter4_tmp_9_reg_1017),30));
    grp_fu_922_p1 <= ap_const_lv30_5556(16 - 1 downto 0);
    i_cast7_fu_625_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_536),32));
    i_cast7_mid1_fu_700_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_s_fu_694_p2),32));
    i_mid2_fu_751_p3 <= 
        i_s_fu_694_p2 when (exitcond_fu_680_p2(0) = '1') else 
        i_reg_536;
    i_s_fu_694_p2 <= std_logic_vector(unsigned(ap_const_lv5_1) + unsigned(i_reg_536));

    image_buffer_0_address0_assign_proc : process(ap_block_pp0_stage0, ap_CS_fsm_state32, ap_enable_reg_pp0_iter23, grp_calc_hist_fu_580_image_buffer_0_address0, tmp_s_fu_869_p1)
    begin
        if (((ap_enable_reg_pp0_iter23 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            image_buffer_0_address0 <= tmp_s_fu_869_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            image_buffer_0_address0 <= grp_calc_hist_fu_580_image_buffer_0_address0;
        else 
            image_buffer_0_address0 <= "XXXXXXX";
        end if; 
    end process;


    image_buffer_0_ce0_assign_proc : process(ap_CS_fsm_state32, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter23, grp_calc_hist_fu_580_image_buffer_0_ce0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter23 = ap_const_logic_1))) then 
            image_buffer_0_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            image_buffer_0_ce0 <= grp_calc_hist_fu_580_image_buffer_0_ce0;
        else 
            image_buffer_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    image_buffer_0_we0_assign_proc : process(ap_block_pp0_stage0_11001, ap_reg_pp0_iter22_tmp_t_reg_1055, ap_enable_reg_pp0_iter23)
    begin
        if (((ap_reg_pp0_iter22_tmp_t_reg_1055 = ap_const_lv4_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter23 = ap_const_logic_1))) then 
            image_buffer_0_we0 <= ap_const_logic_1;
        else 
            image_buffer_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    image_buffer_10_address0_assign_proc : process(ap_block_pp0_stage0, ap_CS_fsm_state32, ap_enable_reg_pp0_iter23, grp_calc_hist_fu_580_image_buffer_10_address0, tmp_s_fu_869_p1)
    begin
        if (((ap_enable_reg_pp0_iter23 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            image_buffer_10_address0 <= tmp_s_fu_869_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            image_buffer_10_address0 <= grp_calc_hist_fu_580_image_buffer_10_address0;
        else 
            image_buffer_10_address0 <= "XXXXXXX";
        end if; 
    end process;


    image_buffer_10_ce0_assign_proc : process(ap_CS_fsm_state32, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter23, grp_calc_hist_fu_580_image_buffer_10_ce0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter23 = ap_const_logic_1))) then 
            image_buffer_10_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            image_buffer_10_ce0 <= grp_calc_hist_fu_580_image_buffer_10_ce0;
        else 
            image_buffer_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    image_buffer_10_we0_assign_proc : process(ap_block_pp0_stage0_11001, ap_reg_pp0_iter22_tmp_t_reg_1055, ap_enable_reg_pp0_iter23)
    begin
        if (((ap_reg_pp0_iter22_tmp_t_reg_1055 = ap_const_lv4_A) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter23 = ap_const_logic_1))) then 
            image_buffer_10_we0 <= ap_const_logic_1;
        else 
            image_buffer_10_we0 <= ap_const_logic_0;
        end if; 
    end process;


    image_buffer_11_address0_assign_proc : process(ap_block_pp0_stage0, ap_CS_fsm_state32, ap_enable_reg_pp0_iter23, grp_calc_hist_fu_580_image_buffer_11_address0, tmp_s_fu_869_p1)
    begin
        if (((ap_enable_reg_pp0_iter23 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            image_buffer_11_address0 <= tmp_s_fu_869_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            image_buffer_11_address0 <= grp_calc_hist_fu_580_image_buffer_11_address0;
        else 
            image_buffer_11_address0 <= "XXXXXXX";
        end if; 
    end process;


    image_buffer_11_ce0_assign_proc : process(ap_CS_fsm_state32, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter23, grp_calc_hist_fu_580_image_buffer_11_ce0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter23 = ap_const_logic_1))) then 
            image_buffer_11_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            image_buffer_11_ce0 <= grp_calc_hist_fu_580_image_buffer_11_ce0;
        else 
            image_buffer_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    image_buffer_11_we0_assign_proc : process(ap_block_pp0_stage0_11001, ap_reg_pp0_iter22_tmp_t_reg_1055, ap_enable_reg_pp0_iter23)
    begin
        if (((ap_reg_pp0_iter22_tmp_t_reg_1055 = ap_const_lv4_B) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter23 = ap_const_logic_1))) then 
            image_buffer_11_we0 <= ap_const_logic_1;
        else 
            image_buffer_11_we0 <= ap_const_logic_0;
        end if; 
    end process;


    image_buffer_12_address0_assign_proc : process(ap_block_pp0_stage0, ap_CS_fsm_state32, ap_enable_reg_pp0_iter23, grp_calc_hist_fu_580_image_buffer_12_address0, tmp_s_fu_869_p1)
    begin
        if (((ap_enable_reg_pp0_iter23 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            image_buffer_12_address0 <= tmp_s_fu_869_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            image_buffer_12_address0 <= grp_calc_hist_fu_580_image_buffer_12_address0;
        else 
            image_buffer_12_address0 <= "XXXXXXX";
        end if; 
    end process;


    image_buffer_12_ce0_assign_proc : process(ap_CS_fsm_state32, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter23, grp_calc_hist_fu_580_image_buffer_12_ce0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter23 = ap_const_logic_1))) then 
            image_buffer_12_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            image_buffer_12_ce0 <= grp_calc_hist_fu_580_image_buffer_12_ce0;
        else 
            image_buffer_12_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    image_buffer_12_we0_assign_proc : process(ap_block_pp0_stage0_11001, ap_reg_pp0_iter22_tmp_t_reg_1055, ap_enable_reg_pp0_iter23)
    begin
        if (((ap_reg_pp0_iter22_tmp_t_reg_1055 = ap_const_lv4_C) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter23 = ap_const_logic_1))) then 
            image_buffer_12_we0 <= ap_const_logic_1;
        else 
            image_buffer_12_we0 <= ap_const_logic_0;
        end if; 
    end process;


    image_buffer_13_address0_assign_proc : process(ap_block_pp0_stage0, ap_CS_fsm_state32, ap_enable_reg_pp0_iter23, grp_calc_hist_fu_580_image_buffer_13_address0, tmp_s_fu_869_p1)
    begin
        if (((ap_enable_reg_pp0_iter23 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            image_buffer_13_address0 <= tmp_s_fu_869_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            image_buffer_13_address0 <= grp_calc_hist_fu_580_image_buffer_13_address0;
        else 
            image_buffer_13_address0 <= "XXXXXXX";
        end if; 
    end process;


    image_buffer_13_ce0_assign_proc : process(ap_CS_fsm_state32, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter23, grp_calc_hist_fu_580_image_buffer_13_ce0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter23 = ap_const_logic_1))) then 
            image_buffer_13_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            image_buffer_13_ce0 <= grp_calc_hist_fu_580_image_buffer_13_ce0;
        else 
            image_buffer_13_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    image_buffer_13_we0_assign_proc : process(ap_block_pp0_stage0_11001, ap_reg_pp0_iter22_tmp_t_reg_1055, ap_enable_reg_pp0_iter23)
    begin
        if (((ap_reg_pp0_iter22_tmp_t_reg_1055 = ap_const_lv4_D) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter23 = ap_const_logic_1))) then 
            image_buffer_13_we0 <= ap_const_logic_1;
        else 
            image_buffer_13_we0 <= ap_const_logic_0;
        end if; 
    end process;


    image_buffer_14_address0_assign_proc : process(ap_block_pp0_stage0, ap_CS_fsm_state32, ap_enable_reg_pp0_iter23, grp_calc_hist_fu_580_image_buffer_14_address0, tmp_s_fu_869_p1)
    begin
        if (((ap_enable_reg_pp0_iter23 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            image_buffer_14_address0 <= tmp_s_fu_869_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            image_buffer_14_address0 <= grp_calc_hist_fu_580_image_buffer_14_address0;
        else 
            image_buffer_14_address0 <= "XXXXXXX";
        end if; 
    end process;


    image_buffer_14_ce0_assign_proc : process(ap_CS_fsm_state32, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter23, grp_calc_hist_fu_580_image_buffer_14_ce0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter23 = ap_const_logic_1))) then 
            image_buffer_14_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            image_buffer_14_ce0 <= grp_calc_hist_fu_580_image_buffer_14_ce0;
        else 
            image_buffer_14_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    image_buffer_14_we0_assign_proc : process(ap_block_pp0_stage0_11001, ap_reg_pp0_iter22_tmp_t_reg_1055, ap_enable_reg_pp0_iter23)
    begin
        if (((ap_reg_pp0_iter22_tmp_t_reg_1055 = ap_const_lv4_E) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter23 = ap_const_logic_1))) then 
            image_buffer_14_we0 <= ap_const_logic_1;
        else 
            image_buffer_14_we0 <= ap_const_logic_0;
        end if; 
    end process;


    image_buffer_15_address0_assign_proc : process(ap_block_pp0_stage0, ap_CS_fsm_state32, ap_enable_reg_pp0_iter23, grp_calc_hist_fu_580_image_buffer_15_address0, tmp_s_fu_869_p1)
    begin
        if (((ap_enable_reg_pp0_iter23 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            image_buffer_15_address0 <= tmp_s_fu_869_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            image_buffer_15_address0 <= grp_calc_hist_fu_580_image_buffer_15_address0;
        else 
            image_buffer_15_address0 <= "XXXXXXX";
        end if; 
    end process;


    image_buffer_15_ce0_assign_proc : process(ap_CS_fsm_state32, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter23, grp_calc_hist_fu_580_image_buffer_15_ce0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter23 = ap_const_logic_1))) then 
            image_buffer_15_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            image_buffer_15_ce0 <= grp_calc_hist_fu_580_image_buffer_15_ce0;
        else 
            image_buffer_15_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    image_buffer_15_we0_assign_proc : process(ap_block_pp0_stage0_11001, ap_reg_pp0_iter22_tmp_t_reg_1055, ap_enable_reg_pp0_iter23)
    begin
        if (((ap_reg_pp0_iter22_tmp_t_reg_1055 = ap_const_lv4_F) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter23 = ap_const_logic_1))) then 
            image_buffer_15_we0 <= ap_const_logic_1;
        else 
            image_buffer_15_we0 <= ap_const_logic_0;
        end if; 
    end process;


    image_buffer_1_address0_assign_proc : process(ap_block_pp0_stage0, ap_CS_fsm_state32, ap_enable_reg_pp0_iter23, grp_calc_hist_fu_580_image_buffer_1_address0, tmp_s_fu_869_p1)
    begin
        if (((ap_enable_reg_pp0_iter23 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            image_buffer_1_address0 <= tmp_s_fu_869_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            image_buffer_1_address0 <= grp_calc_hist_fu_580_image_buffer_1_address0;
        else 
            image_buffer_1_address0 <= "XXXXXXX";
        end if; 
    end process;


    image_buffer_1_ce0_assign_proc : process(ap_CS_fsm_state32, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter23, grp_calc_hist_fu_580_image_buffer_1_ce0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter23 = ap_const_logic_1))) then 
            image_buffer_1_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            image_buffer_1_ce0 <= grp_calc_hist_fu_580_image_buffer_1_ce0;
        else 
            image_buffer_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    image_buffer_1_we0_assign_proc : process(ap_block_pp0_stage0_11001, ap_reg_pp0_iter22_tmp_t_reg_1055, ap_enable_reg_pp0_iter23)
    begin
        if (((ap_reg_pp0_iter22_tmp_t_reg_1055 = ap_const_lv4_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter23 = ap_const_logic_1))) then 
            image_buffer_1_we0 <= ap_const_logic_1;
        else 
            image_buffer_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    image_buffer_2_address0_assign_proc : process(ap_block_pp0_stage0, ap_CS_fsm_state32, ap_enable_reg_pp0_iter23, grp_calc_hist_fu_580_image_buffer_2_address0, tmp_s_fu_869_p1)
    begin
        if (((ap_enable_reg_pp0_iter23 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            image_buffer_2_address0 <= tmp_s_fu_869_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            image_buffer_2_address0 <= grp_calc_hist_fu_580_image_buffer_2_address0;
        else 
            image_buffer_2_address0 <= "XXXXXXX";
        end if; 
    end process;


    image_buffer_2_ce0_assign_proc : process(ap_CS_fsm_state32, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter23, grp_calc_hist_fu_580_image_buffer_2_ce0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter23 = ap_const_logic_1))) then 
            image_buffer_2_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            image_buffer_2_ce0 <= grp_calc_hist_fu_580_image_buffer_2_ce0;
        else 
            image_buffer_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    image_buffer_2_we0_assign_proc : process(ap_block_pp0_stage0_11001, ap_reg_pp0_iter22_tmp_t_reg_1055, ap_enable_reg_pp0_iter23)
    begin
        if (((ap_reg_pp0_iter22_tmp_t_reg_1055 = ap_const_lv4_2) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter23 = ap_const_logic_1))) then 
            image_buffer_2_we0 <= ap_const_logic_1;
        else 
            image_buffer_2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    image_buffer_3_address0_assign_proc : process(ap_block_pp0_stage0, ap_CS_fsm_state32, ap_enable_reg_pp0_iter23, grp_calc_hist_fu_580_image_buffer_3_address0, tmp_s_fu_869_p1)
    begin
        if (((ap_enable_reg_pp0_iter23 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            image_buffer_3_address0 <= tmp_s_fu_869_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            image_buffer_3_address0 <= grp_calc_hist_fu_580_image_buffer_3_address0;
        else 
            image_buffer_3_address0 <= "XXXXXXX";
        end if; 
    end process;


    image_buffer_3_ce0_assign_proc : process(ap_CS_fsm_state32, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter23, grp_calc_hist_fu_580_image_buffer_3_ce0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter23 = ap_const_logic_1))) then 
            image_buffer_3_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            image_buffer_3_ce0 <= grp_calc_hist_fu_580_image_buffer_3_ce0;
        else 
            image_buffer_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    image_buffer_3_we0_assign_proc : process(ap_block_pp0_stage0_11001, ap_reg_pp0_iter22_tmp_t_reg_1055, ap_enable_reg_pp0_iter23)
    begin
        if (((ap_reg_pp0_iter22_tmp_t_reg_1055 = ap_const_lv4_3) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter23 = ap_const_logic_1))) then 
            image_buffer_3_we0 <= ap_const_logic_1;
        else 
            image_buffer_3_we0 <= ap_const_logic_0;
        end if; 
    end process;


    image_buffer_4_address0_assign_proc : process(ap_block_pp0_stage0, ap_CS_fsm_state32, ap_enable_reg_pp0_iter23, grp_calc_hist_fu_580_image_buffer_4_address0, tmp_s_fu_869_p1)
    begin
        if (((ap_enable_reg_pp0_iter23 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            image_buffer_4_address0 <= tmp_s_fu_869_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            image_buffer_4_address0 <= grp_calc_hist_fu_580_image_buffer_4_address0;
        else 
            image_buffer_4_address0 <= "XXXXXXX";
        end if; 
    end process;


    image_buffer_4_ce0_assign_proc : process(ap_CS_fsm_state32, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter23, grp_calc_hist_fu_580_image_buffer_4_ce0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter23 = ap_const_logic_1))) then 
            image_buffer_4_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            image_buffer_4_ce0 <= grp_calc_hist_fu_580_image_buffer_4_ce0;
        else 
            image_buffer_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    image_buffer_4_we0_assign_proc : process(ap_block_pp0_stage0_11001, ap_reg_pp0_iter22_tmp_t_reg_1055, ap_enable_reg_pp0_iter23)
    begin
        if (((ap_reg_pp0_iter22_tmp_t_reg_1055 = ap_const_lv4_4) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter23 = ap_const_logic_1))) then 
            image_buffer_4_we0 <= ap_const_logic_1;
        else 
            image_buffer_4_we0 <= ap_const_logic_0;
        end if; 
    end process;


    image_buffer_5_address0_assign_proc : process(ap_block_pp0_stage0, ap_CS_fsm_state32, ap_enable_reg_pp0_iter23, grp_calc_hist_fu_580_image_buffer_5_address0, tmp_s_fu_869_p1)
    begin
        if (((ap_enable_reg_pp0_iter23 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            image_buffer_5_address0 <= tmp_s_fu_869_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            image_buffer_5_address0 <= grp_calc_hist_fu_580_image_buffer_5_address0;
        else 
            image_buffer_5_address0 <= "XXXXXXX";
        end if; 
    end process;


    image_buffer_5_ce0_assign_proc : process(ap_CS_fsm_state32, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter23, grp_calc_hist_fu_580_image_buffer_5_ce0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter23 = ap_const_logic_1))) then 
            image_buffer_5_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            image_buffer_5_ce0 <= grp_calc_hist_fu_580_image_buffer_5_ce0;
        else 
            image_buffer_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    image_buffer_5_we0_assign_proc : process(ap_block_pp0_stage0_11001, ap_reg_pp0_iter22_tmp_t_reg_1055, ap_enable_reg_pp0_iter23)
    begin
        if (((ap_reg_pp0_iter22_tmp_t_reg_1055 = ap_const_lv4_5) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter23 = ap_const_logic_1))) then 
            image_buffer_5_we0 <= ap_const_logic_1;
        else 
            image_buffer_5_we0 <= ap_const_logic_0;
        end if; 
    end process;


    image_buffer_6_address0_assign_proc : process(ap_block_pp0_stage0, ap_CS_fsm_state32, ap_enable_reg_pp0_iter23, grp_calc_hist_fu_580_image_buffer_6_address0, tmp_s_fu_869_p1)
    begin
        if (((ap_enable_reg_pp0_iter23 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            image_buffer_6_address0 <= tmp_s_fu_869_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            image_buffer_6_address0 <= grp_calc_hist_fu_580_image_buffer_6_address0;
        else 
            image_buffer_6_address0 <= "XXXXXXX";
        end if; 
    end process;


    image_buffer_6_ce0_assign_proc : process(ap_CS_fsm_state32, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter23, grp_calc_hist_fu_580_image_buffer_6_ce0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter23 = ap_const_logic_1))) then 
            image_buffer_6_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            image_buffer_6_ce0 <= grp_calc_hist_fu_580_image_buffer_6_ce0;
        else 
            image_buffer_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    image_buffer_6_we0_assign_proc : process(ap_block_pp0_stage0_11001, ap_reg_pp0_iter22_tmp_t_reg_1055, ap_enable_reg_pp0_iter23)
    begin
        if (((ap_reg_pp0_iter22_tmp_t_reg_1055 = ap_const_lv4_6) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter23 = ap_const_logic_1))) then 
            image_buffer_6_we0 <= ap_const_logic_1;
        else 
            image_buffer_6_we0 <= ap_const_logic_0;
        end if; 
    end process;


    image_buffer_7_address0_assign_proc : process(ap_block_pp0_stage0, ap_CS_fsm_state32, ap_enable_reg_pp0_iter23, grp_calc_hist_fu_580_image_buffer_7_address0, tmp_s_fu_869_p1)
    begin
        if (((ap_enable_reg_pp0_iter23 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            image_buffer_7_address0 <= tmp_s_fu_869_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            image_buffer_7_address0 <= grp_calc_hist_fu_580_image_buffer_7_address0;
        else 
            image_buffer_7_address0 <= "XXXXXXX";
        end if; 
    end process;


    image_buffer_7_ce0_assign_proc : process(ap_CS_fsm_state32, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter23, grp_calc_hist_fu_580_image_buffer_7_ce0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter23 = ap_const_logic_1))) then 
            image_buffer_7_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            image_buffer_7_ce0 <= grp_calc_hist_fu_580_image_buffer_7_ce0;
        else 
            image_buffer_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    image_buffer_7_we0_assign_proc : process(ap_block_pp0_stage0_11001, ap_reg_pp0_iter22_tmp_t_reg_1055, ap_enable_reg_pp0_iter23)
    begin
        if (((ap_reg_pp0_iter22_tmp_t_reg_1055 = ap_const_lv4_7) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter23 = ap_const_logic_1))) then 
            image_buffer_7_we0 <= ap_const_logic_1;
        else 
            image_buffer_7_we0 <= ap_const_logic_0;
        end if; 
    end process;


    image_buffer_8_address0_assign_proc : process(ap_block_pp0_stage0, ap_CS_fsm_state32, ap_enable_reg_pp0_iter23, grp_calc_hist_fu_580_image_buffer_8_address0, tmp_s_fu_869_p1)
    begin
        if (((ap_enable_reg_pp0_iter23 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            image_buffer_8_address0 <= tmp_s_fu_869_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            image_buffer_8_address0 <= grp_calc_hist_fu_580_image_buffer_8_address0;
        else 
            image_buffer_8_address0 <= "XXXXXXX";
        end if; 
    end process;


    image_buffer_8_ce0_assign_proc : process(ap_CS_fsm_state32, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter23, grp_calc_hist_fu_580_image_buffer_8_ce0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter23 = ap_const_logic_1))) then 
            image_buffer_8_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            image_buffer_8_ce0 <= grp_calc_hist_fu_580_image_buffer_8_ce0;
        else 
            image_buffer_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    image_buffer_8_we0_assign_proc : process(ap_block_pp0_stage0_11001, ap_reg_pp0_iter22_tmp_t_reg_1055, ap_enable_reg_pp0_iter23)
    begin
        if (((ap_reg_pp0_iter22_tmp_t_reg_1055 = ap_const_lv4_8) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter23 = ap_const_logic_1))) then 
            image_buffer_8_we0 <= ap_const_logic_1;
        else 
            image_buffer_8_we0 <= ap_const_logic_0;
        end if; 
    end process;


    image_buffer_9_address0_assign_proc : process(ap_block_pp0_stage0, ap_CS_fsm_state32, ap_enable_reg_pp0_iter23, grp_calc_hist_fu_580_image_buffer_9_address0, tmp_s_fu_869_p1)
    begin
        if (((ap_enable_reg_pp0_iter23 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            image_buffer_9_address0 <= tmp_s_fu_869_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            image_buffer_9_address0 <= grp_calc_hist_fu_580_image_buffer_9_address0;
        else 
            image_buffer_9_address0 <= "XXXXXXX";
        end if; 
    end process;


    image_buffer_9_ce0_assign_proc : process(ap_CS_fsm_state32, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter23, grp_calc_hist_fu_580_image_buffer_9_ce0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter23 = ap_const_logic_1))) then 
            image_buffer_9_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            image_buffer_9_ce0 <= grp_calc_hist_fu_580_image_buffer_9_ce0;
        else 
            image_buffer_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    image_buffer_9_we0_assign_proc : process(ap_block_pp0_stage0_11001, ap_reg_pp0_iter22_tmp_t_reg_1055, ap_enable_reg_pp0_iter23)
    begin
        if (((ap_reg_pp0_iter22_tmp_t_reg_1055 = ap_const_lv4_9) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter23 = ap_const_logic_1))) then 
            image_buffer_9_we0 <= ap_const_logic_1;
        else 
            image_buffer_9_we0 <= ap_const_logic_0;
        end if; 
    end process;

        imageptr2_sum_cast_fu_844_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(imageptr2_sum_fu_839_p2),64));

    imageptr2_sum_fu_839_p2 <= std_logic_vector(signed(tmp_10_cast_reg_962) + signed(tmp_3_mid2_cast_fu_835_p1));
    indvar_cast4_cast_fu_782_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(indvar_mid2_reg_992),14));
    indvar_flatten_next_fu_674_p2 <= std_logic_vector(unsigned(ap_const_lv11_1) + unsigned(ap_phi_mux_indvar_flatten_phi_fu_528_p4));
    indvar_mid2_fu_686_p3 <= 
        ap_const_lv7_0 when (exitcond_fu_680_p2(0) = '1') else 
        indvar_reg_547;
    indvar_next9_fu_911_p2 <= std_logic_vector(unsigned(indvar8_reg_569) + unsigned(ap_const_lv6_1));
    indvar_next_fu_759_p2 <= std_logic_vector(unsigned(ap_const_lv7_1) + unsigned(indvar_mid2_fu_686_p3));
    indvarinc_fu_888_p2 <= std_logic_vector(unsigned(invdar_reg_558) + unsigned(ap_const_lv6_1));
    offset_fu_809_p2 <= std_logic_vector(unsigned(tmp_7_fu_803_p2) - unsigned(tmp_2_fu_799_p2));
    offset_mid1_fu_824_p2 <= std_logic_vector(unsigned(tmp_12_fu_819_p2) - unsigned(tmp_2_mid1_reg_1043));
    p_shl3_cast_fu_646_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl3_fu_638_p3),12));
    p_shl3_cast_mid1_fu_721_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl3_mid1_fu_713_p3),12));
    p_shl3_fu_638_p3 <= (tmp_10_fu_634_p1 & ap_const_lv7_0);
    p_shl3_mid1_fu_713_p3 <= (tmp_14_fu_709_p1 & ap_const_lv7_0);
    p_shl4_cast_fu_658_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl4_fu_650_p3),12));
    p_shl4_cast_mid1_fu_733_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl4_mid1_fu_725_p3),12));
    p_shl4_fu_650_p3 <= (tmp_10_fu_634_p1 & ap_const_lv5_0);
    p_shl4_mid1_fu_725_p3 <= (tmp_14_fu_709_p1 & ap_const_lv5_0);

    rst_address0_assign_proc : process(ap_CS_fsm_state32, ap_block_pp1_stage0, ap_CS_fsm_state30, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, grp_calc_hist_fu_580_rst_address0, tmp_4_fu_894_p1, tmp_11_fu_917_p1)
    begin
        if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            rst_address0 <= tmp_11_fu_917_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            rst_address0 <= tmp_4_fu_894_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            rst_address0 <= grp_calc_hist_fu_580_rst_address0;
        else 
            rst_address0 <= "XXXXXX";
        end if; 
    end process;


    rst_ce0_assign_proc : process(ap_CS_fsm_state32, ap_CS_fsm_state30, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0, grp_calc_hist_fu_580_rst_ce0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state30) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)))) then 
            rst_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            rst_ce0 <= grp_calc_hist_fu_580_rst_ce0;
        else 
            rst_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    rst_ce1_assign_proc : process(ap_CS_fsm_state32, grp_calc_hist_fu_580_rst_ce1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            rst_ce1 <= grp_calc_hist_fu_580_rst_ce1;
        else 
            rst_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    rst_we0_assign_proc : process(ap_CS_fsm_state30)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            rst_we0 <= ap_const_logic_1;
        else 
            rst_we0 <= ap_const_logic_0;
        end if; 
    end process;


    rst_we1_assign_proc : process(ap_CS_fsm_state32, grp_calc_hist_fu_580_rst_we1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            rst_we1 <= grp_calc_hist_fu_580_rst_we1;
        else 
            rst_we1 <= ap_const_logic_0;
        end if; 
    end process;


    specs_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            specs_address0 <= ap_const_lv64_2(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            specs_address0 <= ap_const_lv64_1(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            specs_address0 <= ap_const_lv64_0(2 - 1 downto 0);
        else 
            specs_address0 <= "XX";
        end if; 
    end process;


    specs_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            specs_ce0 <= ap_const_logic_1;
        else 
            specs_ce0 <= ap_const_logic_0;
        end if; 
    end process;

        tmp_10_cast_fu_621_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(imageptr),33));

    tmp_10_fu_634_p1 <= i_reg_536(4 - 1 downto 0);
    tmp_11_fu_917_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(indvar8_reg_569),64));
    tmp_12_fu_819_p2 <= std_logic_vector(shift_left(unsigned(tmp_2_mid1_reg_1043),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    tmp_13_fu_829_p3 <= 
        offset_mid1_fu_824_p2 when (ap_reg_pp0_iter6_exitcond_reg_987(0) = '1') else 
        offset_reg_1038;
    tmp_14_fu_709_p1 <= i_s_fu_694_p2(4 - 1 downto 0);
    tmp_16_fu_863_p2 <= "1" when (grp_fu_765_p2 = ap_const_lv11_0) else "0";
    tmp_2_fu_799_p2 <= std_logic_vector(unsigned(tmp_1_reg_1023) + unsigned(x_reg_945));
    tmp_2_mid1_fu_815_p2 <= std_logic_vector(unsigned(tmp_1_mid1_reg_1028) + unsigned(x_reg_945));
    tmp_3_fu_611_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(feature3_fu_601_p4),64));
        tmp_3_mid2_cast_fu_835_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_13_fu_829_p3),33));

    tmp_4_fu_894_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(invdar_reg_558),64));
    tmp_5_fu_899_p2 <= "1" when (invdar_reg_558 = ap_const_lv6_23) else "0";
    tmp_7_fu_803_p2 <= std_logic_vector(shift_left(unsigned(tmp_2_fu_799_p2),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    tmp_8_cast_cast_mid2_1_fu_743_p3 <= 
        tmp_8_mid1_fu_737_p2 when (exitcond_fu_680_p2(0) = '1') else 
        tmp_8_fu_662_p2;
        tmp_8_cast_cast_mid2_fu_779_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_8_cast_cast_mid2_1_reg_1002),14));

    tmp_8_fu_662_p2 <= std_logic_vector(unsigned(p_shl3_cast_fu_646_p1) - unsigned(p_shl4_cast_fu_658_p1));
    tmp_8_mid1_fu_737_p2 <= std_logic_vector(unsigned(p_shl3_cast_mid1_fu_721_p1) - unsigned(p_shl4_cast_mid1_fu_733_p1));
    tmp_9_fu_785_p2 <= std_logic_vector(signed(tmp_8_cast_cast_mid2_fu_779_p1) + signed(indvar_cast4_cast_fu_782_p1));
    tmp_fu_629_p2 <= std_logic_vector(unsigned(i_cast7_fu_625_p1) + unsigned(y_reg_934));
    tmp_mid1_fu_704_p2 <= std_logic_vector(unsigned(i_cast7_mid1_fu_700_p1) + unsigned(y_reg_934));
    tmp_s_fu_869_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_reg_1083),64));
end behav;
