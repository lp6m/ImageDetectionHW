// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="color_hist,hls_ip_2017_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=6.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.250000,HLS_SYN_LAT=3188,HLS_SYN_TPT=none,HLS_SYN_MEM=7,HLS_SYN_DSP=9,HLS_SYN_FF=5123,HLS_SYN_LUT=5657}" *)

module color_hist (
        ap_clk,
        ap_rst_n,
        m_axi_INPUT_IMAGE_AWVALID,
        m_axi_INPUT_IMAGE_AWREADY,
        m_axi_INPUT_IMAGE_AWADDR,
        m_axi_INPUT_IMAGE_AWID,
        m_axi_INPUT_IMAGE_AWLEN,
        m_axi_INPUT_IMAGE_AWSIZE,
        m_axi_INPUT_IMAGE_AWBURST,
        m_axi_INPUT_IMAGE_AWLOCK,
        m_axi_INPUT_IMAGE_AWCACHE,
        m_axi_INPUT_IMAGE_AWPROT,
        m_axi_INPUT_IMAGE_AWQOS,
        m_axi_INPUT_IMAGE_AWREGION,
        m_axi_INPUT_IMAGE_AWUSER,
        m_axi_INPUT_IMAGE_WVALID,
        m_axi_INPUT_IMAGE_WREADY,
        m_axi_INPUT_IMAGE_WDATA,
        m_axi_INPUT_IMAGE_WSTRB,
        m_axi_INPUT_IMAGE_WLAST,
        m_axi_INPUT_IMAGE_WID,
        m_axi_INPUT_IMAGE_WUSER,
        m_axi_INPUT_IMAGE_ARVALID,
        m_axi_INPUT_IMAGE_ARREADY,
        m_axi_INPUT_IMAGE_ARADDR,
        m_axi_INPUT_IMAGE_ARID,
        m_axi_INPUT_IMAGE_ARLEN,
        m_axi_INPUT_IMAGE_ARSIZE,
        m_axi_INPUT_IMAGE_ARBURST,
        m_axi_INPUT_IMAGE_ARLOCK,
        m_axi_INPUT_IMAGE_ARCACHE,
        m_axi_INPUT_IMAGE_ARPROT,
        m_axi_INPUT_IMAGE_ARQOS,
        m_axi_INPUT_IMAGE_ARREGION,
        m_axi_INPUT_IMAGE_ARUSER,
        m_axi_INPUT_IMAGE_RVALID,
        m_axi_INPUT_IMAGE_RREADY,
        m_axi_INPUT_IMAGE_RDATA,
        m_axi_INPUT_IMAGE_RLAST,
        m_axi_INPUT_IMAGE_RID,
        m_axi_INPUT_IMAGE_RUSER,
        m_axi_INPUT_IMAGE_RRESP,
        m_axi_INPUT_IMAGE_BVALID,
        m_axi_INPUT_IMAGE_BREADY,
        m_axi_INPUT_IMAGE_BRESP,
        m_axi_INPUT_IMAGE_BID,
        m_axi_INPUT_IMAGE_BUSER,
        m_axi_FEATURE_AWVALID,
        m_axi_FEATURE_AWREADY,
        m_axi_FEATURE_AWADDR,
        m_axi_FEATURE_AWID,
        m_axi_FEATURE_AWLEN,
        m_axi_FEATURE_AWSIZE,
        m_axi_FEATURE_AWBURST,
        m_axi_FEATURE_AWLOCK,
        m_axi_FEATURE_AWCACHE,
        m_axi_FEATURE_AWPROT,
        m_axi_FEATURE_AWQOS,
        m_axi_FEATURE_AWREGION,
        m_axi_FEATURE_AWUSER,
        m_axi_FEATURE_WVALID,
        m_axi_FEATURE_WREADY,
        m_axi_FEATURE_WDATA,
        m_axi_FEATURE_WSTRB,
        m_axi_FEATURE_WLAST,
        m_axi_FEATURE_WID,
        m_axi_FEATURE_WUSER,
        m_axi_FEATURE_ARVALID,
        m_axi_FEATURE_ARREADY,
        m_axi_FEATURE_ARADDR,
        m_axi_FEATURE_ARID,
        m_axi_FEATURE_ARLEN,
        m_axi_FEATURE_ARSIZE,
        m_axi_FEATURE_ARBURST,
        m_axi_FEATURE_ARLOCK,
        m_axi_FEATURE_ARCACHE,
        m_axi_FEATURE_ARPROT,
        m_axi_FEATURE_ARQOS,
        m_axi_FEATURE_ARREGION,
        m_axi_FEATURE_ARUSER,
        m_axi_FEATURE_RVALID,
        m_axi_FEATURE_RREADY,
        m_axi_FEATURE_RDATA,
        m_axi_FEATURE_RLAST,
        m_axi_FEATURE_RID,
        m_axi_FEATURE_RUSER,
        m_axi_FEATURE_RRESP,
        m_axi_FEATURE_BVALID,
        m_axi_FEATURE_BREADY,
        m_axi_FEATURE_BRESP,
        m_axi_FEATURE_BID,
        m_axi_FEATURE_BUSER,
        s_axi_CONTROL_BUS_AWVALID,
        s_axi_CONTROL_BUS_AWREADY,
        s_axi_CONTROL_BUS_AWADDR,
        s_axi_CONTROL_BUS_WVALID,
        s_axi_CONTROL_BUS_WREADY,
        s_axi_CONTROL_BUS_WDATA,
        s_axi_CONTROL_BUS_WSTRB,
        s_axi_CONTROL_BUS_ARVALID,
        s_axi_CONTROL_BUS_ARREADY,
        s_axi_CONTROL_BUS_ARADDR,
        s_axi_CONTROL_BUS_RVALID,
        s_axi_CONTROL_BUS_RREADY,
        s_axi_CONTROL_BUS_RDATA,
        s_axi_CONTROL_BUS_RRESP,
        s_axi_CONTROL_BUS_BVALID,
        s_axi_CONTROL_BUS_BREADY,
        s_axi_CONTROL_BUS_BRESP,
        interrupt,
        s_axi_SPECS_AWVALID,
        s_axi_SPECS_AWREADY,
        s_axi_SPECS_AWADDR,
        s_axi_SPECS_WVALID,
        s_axi_SPECS_WREADY,
        s_axi_SPECS_WDATA,
        s_axi_SPECS_WSTRB,
        s_axi_SPECS_ARVALID,
        s_axi_SPECS_ARREADY,
        s_axi_SPECS_ARADDR,
        s_axi_SPECS_RVALID,
        s_axi_SPECS_RREADY,
        s_axi_SPECS_RDATA,
        s_axi_SPECS_RRESP,
        s_axi_SPECS_BVALID,
        s_axi_SPECS_BREADY,
        s_axi_SPECS_BRESP
);

parameter    ap_ST_fsm_state1 = 15'd1;
parameter    ap_ST_fsm_state2 = 15'd2;
parameter    ap_ST_fsm_state3 = 15'd4;
parameter    ap_ST_fsm_state4 = 15'd8;
parameter    ap_ST_fsm_pp0_stage0 = 15'd16;
parameter    ap_ST_fsm_state29 = 15'd32;
parameter    ap_ST_fsm_state30 = 15'd64;
parameter    ap_ST_fsm_state31 = 15'd128;
parameter    ap_ST_fsm_state32 = 15'd256;
parameter    ap_ST_fsm_pp1_stage0 = 15'd512;
parameter    ap_ST_fsm_state36 = 15'd1024;
parameter    ap_ST_fsm_state37 = 15'd2048;
parameter    ap_ST_fsm_state38 = 15'd4096;
parameter    ap_ST_fsm_state39 = 15'd8192;
parameter    ap_ST_fsm_state40 = 15'd16384;
parameter    C_S_AXI_CONTROL_BUS_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_BUS_ADDR_WIDTH = 5;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_S_AXI_SPECS_DATA_WIDTH = 32;
parameter    C_S_AXI_SPECS_ADDR_WIDTH = 5;
parameter    C_M_AXI_INPUT_IMAGE_ID_WIDTH = 1;
parameter    C_M_AXI_INPUT_IMAGE_ADDR_WIDTH = 32;
parameter    C_M_AXI_INPUT_IMAGE_DATA_WIDTH = 32;
parameter    C_M_AXI_INPUT_IMAGE_AWUSER_WIDTH = 1;
parameter    C_M_AXI_INPUT_IMAGE_ARUSER_WIDTH = 1;
parameter    C_M_AXI_INPUT_IMAGE_WUSER_WIDTH = 1;
parameter    C_M_AXI_INPUT_IMAGE_RUSER_WIDTH = 1;
parameter    C_M_AXI_INPUT_IMAGE_BUSER_WIDTH = 1;
parameter    C_M_AXI_INPUT_IMAGE_USER_VALUE = 0;
parameter    C_M_AXI_INPUT_IMAGE_PROT_VALUE = 0;
parameter    C_M_AXI_INPUT_IMAGE_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_FEATURE_ID_WIDTH = 1;
parameter    C_M_AXI_FEATURE_ADDR_WIDTH = 32;
parameter    C_M_AXI_FEATURE_DATA_WIDTH = 32;
parameter    C_M_AXI_FEATURE_AWUSER_WIDTH = 1;
parameter    C_M_AXI_FEATURE_ARUSER_WIDTH = 1;
parameter    C_M_AXI_FEATURE_WUSER_WIDTH = 1;
parameter    C_M_AXI_FEATURE_RUSER_WIDTH = 1;
parameter    C_M_AXI_FEATURE_BUSER_WIDTH = 1;
parameter    C_M_AXI_FEATURE_USER_VALUE = 0;
parameter    C_M_AXI_FEATURE_PROT_VALUE = 0;
parameter    C_M_AXI_FEATURE_CACHE_VALUE = 3;

parameter C_S_AXI_CONTROL_BUS_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_SPECS_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_INPUT_IMAGE_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_FEATURE_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_INPUT_IMAGE_AWVALID;
input   m_axi_INPUT_IMAGE_AWREADY;
output  [C_M_AXI_INPUT_IMAGE_ADDR_WIDTH - 1:0] m_axi_INPUT_IMAGE_AWADDR;
output  [C_M_AXI_INPUT_IMAGE_ID_WIDTH - 1:0] m_axi_INPUT_IMAGE_AWID;
output  [7:0] m_axi_INPUT_IMAGE_AWLEN;
output  [2:0] m_axi_INPUT_IMAGE_AWSIZE;
output  [1:0] m_axi_INPUT_IMAGE_AWBURST;
output  [1:0] m_axi_INPUT_IMAGE_AWLOCK;
output  [3:0] m_axi_INPUT_IMAGE_AWCACHE;
output  [2:0] m_axi_INPUT_IMAGE_AWPROT;
output  [3:0] m_axi_INPUT_IMAGE_AWQOS;
output  [3:0] m_axi_INPUT_IMAGE_AWREGION;
output  [C_M_AXI_INPUT_IMAGE_AWUSER_WIDTH - 1:0] m_axi_INPUT_IMAGE_AWUSER;
output   m_axi_INPUT_IMAGE_WVALID;
input   m_axi_INPUT_IMAGE_WREADY;
output  [C_M_AXI_INPUT_IMAGE_DATA_WIDTH - 1:0] m_axi_INPUT_IMAGE_WDATA;
output  [C_M_AXI_INPUT_IMAGE_WSTRB_WIDTH - 1:0] m_axi_INPUT_IMAGE_WSTRB;
output   m_axi_INPUT_IMAGE_WLAST;
output  [C_M_AXI_INPUT_IMAGE_ID_WIDTH - 1:0] m_axi_INPUT_IMAGE_WID;
output  [C_M_AXI_INPUT_IMAGE_WUSER_WIDTH - 1:0] m_axi_INPUT_IMAGE_WUSER;
output   m_axi_INPUT_IMAGE_ARVALID;
input   m_axi_INPUT_IMAGE_ARREADY;
output  [C_M_AXI_INPUT_IMAGE_ADDR_WIDTH - 1:0] m_axi_INPUT_IMAGE_ARADDR;
output  [C_M_AXI_INPUT_IMAGE_ID_WIDTH - 1:0] m_axi_INPUT_IMAGE_ARID;
output  [7:0] m_axi_INPUT_IMAGE_ARLEN;
output  [2:0] m_axi_INPUT_IMAGE_ARSIZE;
output  [1:0] m_axi_INPUT_IMAGE_ARBURST;
output  [1:0] m_axi_INPUT_IMAGE_ARLOCK;
output  [3:0] m_axi_INPUT_IMAGE_ARCACHE;
output  [2:0] m_axi_INPUT_IMAGE_ARPROT;
output  [3:0] m_axi_INPUT_IMAGE_ARQOS;
output  [3:0] m_axi_INPUT_IMAGE_ARREGION;
output  [C_M_AXI_INPUT_IMAGE_ARUSER_WIDTH - 1:0] m_axi_INPUT_IMAGE_ARUSER;
input   m_axi_INPUT_IMAGE_RVALID;
output   m_axi_INPUT_IMAGE_RREADY;
input  [C_M_AXI_INPUT_IMAGE_DATA_WIDTH - 1:0] m_axi_INPUT_IMAGE_RDATA;
input   m_axi_INPUT_IMAGE_RLAST;
input  [C_M_AXI_INPUT_IMAGE_ID_WIDTH - 1:0] m_axi_INPUT_IMAGE_RID;
input  [C_M_AXI_INPUT_IMAGE_RUSER_WIDTH - 1:0] m_axi_INPUT_IMAGE_RUSER;
input  [1:0] m_axi_INPUT_IMAGE_RRESP;
input   m_axi_INPUT_IMAGE_BVALID;
output   m_axi_INPUT_IMAGE_BREADY;
input  [1:0] m_axi_INPUT_IMAGE_BRESP;
input  [C_M_AXI_INPUT_IMAGE_ID_WIDTH - 1:0] m_axi_INPUT_IMAGE_BID;
input  [C_M_AXI_INPUT_IMAGE_BUSER_WIDTH - 1:0] m_axi_INPUT_IMAGE_BUSER;
output   m_axi_FEATURE_AWVALID;
input   m_axi_FEATURE_AWREADY;
output  [C_M_AXI_FEATURE_ADDR_WIDTH - 1:0] m_axi_FEATURE_AWADDR;
output  [C_M_AXI_FEATURE_ID_WIDTH - 1:0] m_axi_FEATURE_AWID;
output  [7:0] m_axi_FEATURE_AWLEN;
output  [2:0] m_axi_FEATURE_AWSIZE;
output  [1:0] m_axi_FEATURE_AWBURST;
output  [1:0] m_axi_FEATURE_AWLOCK;
output  [3:0] m_axi_FEATURE_AWCACHE;
output  [2:0] m_axi_FEATURE_AWPROT;
output  [3:0] m_axi_FEATURE_AWQOS;
output  [3:0] m_axi_FEATURE_AWREGION;
output  [C_M_AXI_FEATURE_AWUSER_WIDTH - 1:0] m_axi_FEATURE_AWUSER;
output   m_axi_FEATURE_WVALID;
input   m_axi_FEATURE_WREADY;
output  [C_M_AXI_FEATURE_DATA_WIDTH - 1:0] m_axi_FEATURE_WDATA;
output  [C_M_AXI_FEATURE_WSTRB_WIDTH - 1:0] m_axi_FEATURE_WSTRB;
output   m_axi_FEATURE_WLAST;
output  [C_M_AXI_FEATURE_ID_WIDTH - 1:0] m_axi_FEATURE_WID;
output  [C_M_AXI_FEATURE_WUSER_WIDTH - 1:0] m_axi_FEATURE_WUSER;
output   m_axi_FEATURE_ARVALID;
input   m_axi_FEATURE_ARREADY;
output  [C_M_AXI_FEATURE_ADDR_WIDTH - 1:0] m_axi_FEATURE_ARADDR;
output  [C_M_AXI_FEATURE_ID_WIDTH - 1:0] m_axi_FEATURE_ARID;
output  [7:0] m_axi_FEATURE_ARLEN;
output  [2:0] m_axi_FEATURE_ARSIZE;
output  [1:0] m_axi_FEATURE_ARBURST;
output  [1:0] m_axi_FEATURE_ARLOCK;
output  [3:0] m_axi_FEATURE_ARCACHE;
output  [2:0] m_axi_FEATURE_ARPROT;
output  [3:0] m_axi_FEATURE_ARQOS;
output  [3:0] m_axi_FEATURE_ARREGION;
output  [C_M_AXI_FEATURE_ARUSER_WIDTH - 1:0] m_axi_FEATURE_ARUSER;
input   m_axi_FEATURE_RVALID;
output   m_axi_FEATURE_RREADY;
input  [C_M_AXI_FEATURE_DATA_WIDTH - 1:0] m_axi_FEATURE_RDATA;
input   m_axi_FEATURE_RLAST;
input  [C_M_AXI_FEATURE_ID_WIDTH - 1:0] m_axi_FEATURE_RID;
input  [C_M_AXI_FEATURE_RUSER_WIDTH - 1:0] m_axi_FEATURE_RUSER;
input  [1:0] m_axi_FEATURE_RRESP;
input   m_axi_FEATURE_BVALID;
output   m_axi_FEATURE_BREADY;
input  [1:0] m_axi_FEATURE_BRESP;
input  [C_M_AXI_FEATURE_ID_WIDTH - 1:0] m_axi_FEATURE_BID;
input  [C_M_AXI_FEATURE_BUSER_WIDTH - 1:0] m_axi_FEATURE_BUSER;
input   s_axi_CONTROL_BUS_AWVALID;
output   s_axi_CONTROL_BUS_AWREADY;
input  [C_S_AXI_CONTROL_BUS_ADDR_WIDTH - 1:0] s_axi_CONTROL_BUS_AWADDR;
input   s_axi_CONTROL_BUS_WVALID;
output   s_axi_CONTROL_BUS_WREADY;
input  [C_S_AXI_CONTROL_BUS_DATA_WIDTH - 1:0] s_axi_CONTROL_BUS_WDATA;
input  [C_S_AXI_CONTROL_BUS_WSTRB_WIDTH - 1:0] s_axi_CONTROL_BUS_WSTRB;
input   s_axi_CONTROL_BUS_ARVALID;
output   s_axi_CONTROL_BUS_ARREADY;
input  [C_S_AXI_CONTROL_BUS_ADDR_WIDTH - 1:0] s_axi_CONTROL_BUS_ARADDR;
output   s_axi_CONTROL_BUS_RVALID;
input   s_axi_CONTROL_BUS_RREADY;
output  [C_S_AXI_CONTROL_BUS_DATA_WIDTH - 1:0] s_axi_CONTROL_BUS_RDATA;
output  [1:0] s_axi_CONTROL_BUS_RRESP;
output   s_axi_CONTROL_BUS_BVALID;
input   s_axi_CONTROL_BUS_BREADY;
output  [1:0] s_axi_CONTROL_BUS_BRESP;
output   interrupt;
input   s_axi_SPECS_AWVALID;
output   s_axi_SPECS_AWREADY;
input  [C_S_AXI_SPECS_ADDR_WIDTH - 1:0] s_axi_SPECS_AWADDR;
input   s_axi_SPECS_WVALID;
output   s_axi_SPECS_WREADY;
input  [C_S_AXI_SPECS_DATA_WIDTH - 1:0] s_axi_SPECS_WDATA;
input  [C_S_AXI_SPECS_WSTRB_WIDTH - 1:0] s_axi_SPECS_WSTRB;
input   s_axi_SPECS_ARVALID;
output   s_axi_SPECS_ARREADY;
input  [C_S_AXI_SPECS_ADDR_WIDTH - 1:0] s_axi_SPECS_ARADDR;
output   s_axi_SPECS_RVALID;
input   s_axi_SPECS_RREADY;
output  [C_S_AXI_SPECS_DATA_WIDTH - 1:0] s_axi_SPECS_RDATA;
output  [1:0] s_axi_SPECS_RRESP;
output   s_axi_SPECS_BVALID;
input   s_axi_SPECS_BREADY;
output  [1:0] s_axi_SPECS_BRESP;

reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [14:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
reg   [1:0] specs_address0;
reg    specs_ce0;
wire   [31:0] specs_q0;
wire   [31:0] imageptr;
wire   [31:0] feature_r;
reg    INPUT_IMAGE_blk_n_AR;
reg    ap_enable_reg_pp0_iter15;
wire    ap_block_pp0_stage0;
reg   [0:0] tmp_16_reg_1059;
reg    INPUT_IMAGE_blk_n_R;
reg    ap_enable_reg_pp0_iter22;
reg    FEATURE_blk_n_AW;
wire    ap_CS_fsm_state32;
reg    FEATURE_blk_n_W;
reg    ap_enable_reg_pp1_iter2;
wire    ap_block_pp1_stage0;
reg   [0:0] exitcond2_reg_1096;
reg   [0:0] ap_reg_pp1_iter1_exitcond2_reg_1096;
reg    FEATURE_blk_n_B;
wire    ap_CS_fsm_state40;
wire    INPUT_IMAGE_AWREADY;
wire    INPUT_IMAGE_WREADY;
reg    INPUT_IMAGE_ARVALID;
wire    INPUT_IMAGE_ARREADY;
wire    INPUT_IMAGE_RVALID;
reg    INPUT_IMAGE_RREADY;
wire   [7:0] INPUT_IMAGE_RDATA;
wire    INPUT_IMAGE_RLAST;
wire   [0:0] INPUT_IMAGE_RID;
wire   [0:0] INPUT_IMAGE_RUSER;
wire   [1:0] INPUT_IMAGE_RRESP;
wire    INPUT_IMAGE_BVALID;
wire   [1:0] INPUT_IMAGE_BRESP;
wire   [0:0] INPUT_IMAGE_BID;
wire   [0:0] INPUT_IMAGE_BUSER;
reg    FEATURE_AWVALID;
wire    FEATURE_AWREADY;
reg    FEATURE_WVALID;
wire    FEATURE_WREADY;
wire    FEATURE_ARREADY;
wire    FEATURE_RVALID;
wire   [15:0] FEATURE_RDATA;
wire    FEATURE_RLAST;
wire   [0:0] FEATURE_RID;
wire   [0:0] FEATURE_RUSER;
wire   [1:0] FEATURE_RRESP;
wire    FEATURE_BVALID;
reg    FEATURE_BREADY;
wire   [1:0] FEATURE_BRESP;
wire   [0:0] FEATURE_BID;
wire   [0:0] FEATURE_BUSER;
reg   [10:0] indvar_flatten_reg_524;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state5_pp0_stage0_iter0;
wire    ap_block_state6_pp0_stage0_iter1;
wire    ap_block_state7_pp0_stage0_iter2;
wire    ap_block_state8_pp0_stage0_iter3;
wire    ap_block_state9_pp0_stage0_iter4;
wire    ap_block_state10_pp0_stage0_iter5;
wire    ap_block_state11_pp0_stage0_iter6;
wire    ap_block_state12_pp0_stage0_iter7;
wire    ap_block_state13_pp0_stage0_iter8;
wire    ap_block_state14_pp0_stage0_iter9;
wire    ap_block_state15_pp0_stage0_iter10;
wire    ap_block_state16_pp0_stage0_iter11;
wire    ap_block_state17_pp0_stage0_iter12;
wire    ap_block_state18_pp0_stage0_iter13;
wire    ap_block_state19_pp0_stage0_iter14;
wire    ap_block_state20_pp0_stage0_iter15;
reg    ap_sig_ioackin_INPUT_IMAGE_ARREADY;
reg    ap_block_state20_io;
wire    ap_block_state21_pp0_stage0_iter16;
wire    ap_block_state22_pp0_stage0_iter17;
wire    ap_block_state23_pp0_stage0_iter18;
wire    ap_block_state24_pp0_stage0_iter19;
wire    ap_block_state25_pp0_stage0_iter20;
wire    ap_block_state26_pp0_stage0_iter21;
reg    ap_block_state27_pp0_stage0_iter22;
wire    ap_block_state28_pp0_stage0_iter23;
reg    ap_block_pp0_stage0_11001;
reg   [4:0] i_reg_536;
reg   [6:0] indvar_reg_547;
reg   [5:0] indvar8_reg_569;
reg   [31:0] y_reg_934;
wire    ap_CS_fsm_state2;
reg   [31:0] x_reg_945;
wire    ap_CS_fsm_state3;
reg   [31:0] FEATURE_addr_reg_956;
wire    ap_CS_fsm_state4;
wire  signed [32:0] tmp_10_cast_fu_621_p1;
reg  signed [32:0] tmp_10_cast_reg_962;
reg  signed [31:0] original_width_reg_967;
wire  signed [31:0] tmp_fu_629_p2;
reg  signed [31:0] tmp_reg_973;
wire   [0:0] exitcond_flatten_fu_668_p2;
reg   [0:0] exitcond_flatten_reg_978;
reg   [0:0] ap_reg_pp0_iter1_exitcond_flatten_reg_978;
reg   [0:0] ap_reg_pp0_iter2_exitcond_flatten_reg_978;
reg   [0:0] ap_reg_pp0_iter3_exitcond_flatten_reg_978;
reg   [0:0] ap_reg_pp0_iter4_exitcond_flatten_reg_978;
reg   [0:0] ap_reg_pp0_iter5_exitcond_flatten_reg_978;
reg   [0:0] ap_reg_pp0_iter6_exitcond_flatten_reg_978;
reg   [0:0] ap_reg_pp0_iter7_exitcond_flatten_reg_978;
reg   [0:0] ap_reg_pp0_iter8_exitcond_flatten_reg_978;
reg   [0:0] ap_reg_pp0_iter9_exitcond_flatten_reg_978;
reg   [0:0] ap_reg_pp0_iter10_exitcond_flatten_reg_978;
reg   [0:0] ap_reg_pp0_iter11_exitcond_flatten_reg_978;
reg   [0:0] ap_reg_pp0_iter12_exitcond_flatten_reg_978;
reg   [0:0] ap_reg_pp0_iter13_exitcond_flatten_reg_978;
wire   [10:0] indvar_flatten_next_fu_674_p2;
reg   [10:0] indvar_flatten_next_reg_982;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] exitcond_fu_680_p2;
reg   [0:0] exitcond_reg_987;
reg   [0:0] ap_reg_pp0_iter1_exitcond_reg_987;
reg   [0:0] ap_reg_pp0_iter2_exitcond_reg_987;
reg   [0:0] ap_reg_pp0_iter3_exitcond_reg_987;
reg   [0:0] ap_reg_pp0_iter4_exitcond_reg_987;
reg   [0:0] ap_reg_pp0_iter5_exitcond_reg_987;
reg   [0:0] ap_reg_pp0_iter6_exitcond_reg_987;
wire   [6:0] indvar_mid2_fu_686_p3;
reg   [6:0] indvar_mid2_reg_992;
wire  signed [31:0] tmp_mid1_fu_704_p2;
reg  signed [31:0] tmp_mid1_reg_997;
wire   [11:0] tmp_8_cast_cast_mid2_1_fu_743_p3;
reg   [11:0] tmp_8_cast_cast_mid2_1_reg_1002;
wire   [4:0] i_mid2_fu_751_p3;
wire   [6:0] indvar_next_fu_759_p2;
wire   [13:0] tmp_9_fu_785_p2;
reg   [13:0] tmp_9_reg_1017;
reg   [13:0] ap_reg_pp0_iter2_tmp_9_reg_1017;
reg   [13:0] ap_reg_pp0_iter3_tmp_9_reg_1017;
reg   [13:0] ap_reg_pp0_iter4_tmp_9_reg_1017;
wire   [31:0] grp_fu_771_p2;
reg   [31:0] tmp_1_reg_1023;
wire   [31:0] grp_fu_775_p2;
reg   [31:0] tmp_1_mid1_reg_1028;
wire   [31:0] offset_fu_809_p2;
reg   [31:0] offset_reg_1038;
wire   [31:0] tmp_2_mid1_fu_815_p2;
reg   [31:0] tmp_2_mid1_reg_1043;
reg   [31:0] INPUT_IMAGE_addr_reg_1049;
reg   [31:0] ap_reg_pp0_iter8_INPUT_IMAGE_addr_reg_1049;
reg   [31:0] ap_reg_pp0_iter9_INPUT_IMAGE_addr_reg_1049;
reg   [31:0] ap_reg_pp0_iter10_INPUT_IMAGE_addr_reg_1049;
reg   [31:0] ap_reg_pp0_iter11_INPUT_IMAGE_addr_reg_1049;
reg   [31:0] ap_reg_pp0_iter12_INPUT_IMAGE_addr_reg_1049;
reg   [31:0] ap_reg_pp0_iter13_INPUT_IMAGE_addr_reg_1049;
reg   [31:0] ap_reg_pp0_iter14_INPUT_IMAGE_addr_reg_1049;
reg   [3:0] tmp_t_reg_1055;
reg   [3:0] ap_reg_pp0_iter8_tmp_t_reg_1055;
reg   [3:0] ap_reg_pp0_iter9_tmp_t_reg_1055;
reg   [3:0] ap_reg_pp0_iter10_tmp_t_reg_1055;
reg   [3:0] ap_reg_pp0_iter11_tmp_t_reg_1055;
reg   [3:0] ap_reg_pp0_iter12_tmp_t_reg_1055;
reg   [3:0] ap_reg_pp0_iter13_tmp_t_reg_1055;
reg   [3:0] ap_reg_pp0_iter14_tmp_t_reg_1055;
reg   [3:0] ap_reg_pp0_iter15_tmp_t_reg_1055;
reg   [3:0] ap_reg_pp0_iter16_tmp_t_reg_1055;
reg   [3:0] ap_reg_pp0_iter17_tmp_t_reg_1055;
reg   [3:0] ap_reg_pp0_iter18_tmp_t_reg_1055;
reg   [3:0] ap_reg_pp0_iter19_tmp_t_reg_1055;
reg   [3:0] ap_reg_pp0_iter20_tmp_t_reg_1055;
reg   [3:0] ap_reg_pp0_iter21_tmp_t_reg_1055;
reg   [3:0] ap_reg_pp0_iter22_tmp_t_reg_1055;
wire   [0:0] tmp_16_fu_863_p2;
reg   [7:0] INPUT_IMAGE_addr_rea_reg_1063;
wire   [13:0] grp_fu_794_p2;
reg   [13:0] tmp_6_reg_1083;
wire   [5:0] indvarinc_fu_888_p2;
wire    ap_CS_fsm_state30;
wire   [0:0] exitcond2_fu_905_p2;
wire    ap_CS_fsm_pp1_stage0;
wire    ap_block_state33_pp1_stage0_iter0;
wire    ap_block_state34_pp1_stage0_iter1;
wire    ap_block_state35_pp1_stage0_iter2;
reg    ap_sig_ioackin_FEATURE_WREADY;
reg    ap_block_state35_io;
reg    ap_block_pp1_stage0_11001;
wire   [5:0] indvar_next9_fu_911_p2;
reg    ap_enable_reg_pp1_iter0;
wire   [15:0] rst_q0;
reg   [15:0] rst_load_reg_1110;
reg    ap_enable_reg_pp1_iter1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_condition_pp0_exit_iter6_state11;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_enable_reg_pp0_iter14;
reg    ap_enable_reg_pp0_iter16;
reg    ap_enable_reg_pp0_iter17;
reg    ap_enable_reg_pp0_iter18;
reg    ap_enable_reg_pp0_iter19;
reg    ap_enable_reg_pp0_iter20;
reg    ap_enable_reg_pp0_iter21;
reg    ap_enable_reg_pp0_iter23;
reg    ap_sig_ioackin_FEATURE_AWREADY;
wire    grp_calc_hist_fu_580_ap_done;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state33;
reg   [6:0] image_buffer_0_address0;
reg    image_buffer_0_ce0;
reg    image_buffer_0_we0;
wire   [7:0] image_buffer_0_q0;
reg   [6:0] image_buffer_1_address0;
reg    image_buffer_1_ce0;
reg    image_buffer_1_we0;
wire   [7:0] image_buffer_1_q0;
reg   [6:0] image_buffer_2_address0;
reg    image_buffer_2_ce0;
reg    image_buffer_2_we0;
wire   [7:0] image_buffer_2_q0;
reg   [6:0] image_buffer_3_address0;
reg    image_buffer_3_ce0;
reg    image_buffer_3_we0;
wire   [7:0] image_buffer_3_q0;
reg   [6:0] image_buffer_4_address0;
reg    image_buffer_4_ce0;
reg    image_buffer_4_we0;
wire   [7:0] image_buffer_4_q0;
reg   [6:0] image_buffer_5_address0;
reg    image_buffer_5_ce0;
reg    image_buffer_5_we0;
wire   [7:0] image_buffer_5_q0;
reg   [6:0] image_buffer_6_address0;
reg    image_buffer_6_ce0;
reg    image_buffer_6_we0;
wire   [7:0] image_buffer_6_q0;
reg   [6:0] image_buffer_7_address0;
reg    image_buffer_7_ce0;
reg    image_buffer_7_we0;
wire   [7:0] image_buffer_7_q0;
reg   [6:0] image_buffer_8_address0;
reg    image_buffer_8_ce0;
reg    image_buffer_8_we0;
wire   [7:0] image_buffer_8_q0;
reg   [6:0] image_buffer_9_address0;
reg    image_buffer_9_ce0;
reg    image_buffer_9_we0;
wire   [7:0] image_buffer_9_q0;
reg   [6:0] image_buffer_10_address0;
reg    image_buffer_10_ce0;
reg    image_buffer_10_we0;
wire   [7:0] image_buffer_10_q0;
reg   [6:0] image_buffer_11_address0;
reg    image_buffer_11_ce0;
reg    image_buffer_11_we0;
wire   [7:0] image_buffer_11_q0;
reg   [6:0] image_buffer_12_address0;
reg    image_buffer_12_ce0;
reg    image_buffer_12_we0;
wire   [7:0] image_buffer_12_q0;
reg   [6:0] image_buffer_13_address0;
reg    image_buffer_13_ce0;
reg    image_buffer_13_we0;
wire   [7:0] image_buffer_13_q0;
reg   [6:0] image_buffer_14_address0;
reg    image_buffer_14_ce0;
reg    image_buffer_14_we0;
wire   [7:0] image_buffer_14_q0;
reg   [6:0] image_buffer_15_address0;
reg    image_buffer_15_ce0;
reg    image_buffer_15_we0;
wire   [7:0] image_buffer_15_q0;
reg   [5:0] rst_address0;
reg    rst_ce0;
reg    rst_we0;
reg    rst_ce1;
reg    rst_we1;
wire    grp_calc_hist_fu_580_ap_start;
wire    grp_calc_hist_fu_580_ap_idle;
wire    grp_calc_hist_fu_580_ap_ready;
wire   [6:0] grp_calc_hist_fu_580_image_buffer_0_address0;
wire    grp_calc_hist_fu_580_image_buffer_0_ce0;
wire   [6:0] grp_calc_hist_fu_580_image_buffer_1_address0;
wire    grp_calc_hist_fu_580_image_buffer_1_ce0;
wire   [6:0] grp_calc_hist_fu_580_image_buffer_2_address0;
wire    grp_calc_hist_fu_580_image_buffer_2_ce0;
wire   [6:0] grp_calc_hist_fu_580_image_buffer_3_address0;
wire    grp_calc_hist_fu_580_image_buffer_3_ce0;
wire   [6:0] grp_calc_hist_fu_580_image_buffer_4_address0;
wire    grp_calc_hist_fu_580_image_buffer_4_ce0;
wire   [6:0] grp_calc_hist_fu_580_image_buffer_5_address0;
wire    grp_calc_hist_fu_580_image_buffer_5_ce0;
wire   [6:0] grp_calc_hist_fu_580_image_buffer_6_address0;
wire    grp_calc_hist_fu_580_image_buffer_6_ce0;
wire   [6:0] grp_calc_hist_fu_580_image_buffer_7_address0;
wire    grp_calc_hist_fu_580_image_buffer_7_ce0;
wire   [6:0] grp_calc_hist_fu_580_image_buffer_8_address0;
wire    grp_calc_hist_fu_580_image_buffer_8_ce0;
wire   [6:0] grp_calc_hist_fu_580_image_buffer_9_address0;
wire    grp_calc_hist_fu_580_image_buffer_9_ce0;
wire   [6:0] grp_calc_hist_fu_580_image_buffer_10_address0;
wire    grp_calc_hist_fu_580_image_buffer_10_ce0;
wire   [6:0] grp_calc_hist_fu_580_image_buffer_11_address0;
wire    grp_calc_hist_fu_580_image_buffer_11_ce0;
wire   [6:0] grp_calc_hist_fu_580_image_buffer_12_address0;
wire    grp_calc_hist_fu_580_image_buffer_12_ce0;
wire   [6:0] grp_calc_hist_fu_580_image_buffer_13_address0;
wire    grp_calc_hist_fu_580_image_buffer_13_ce0;
wire   [6:0] grp_calc_hist_fu_580_image_buffer_14_address0;
wire    grp_calc_hist_fu_580_image_buffer_14_ce0;
wire   [6:0] grp_calc_hist_fu_580_image_buffer_15_address0;
wire    grp_calc_hist_fu_580_image_buffer_15_ce0;
wire   [5:0] grp_calc_hist_fu_580_rst_address0;
wire    grp_calc_hist_fu_580_rst_ce0;
wire   [5:0] grp_calc_hist_fu_580_rst_address1;
wire    grp_calc_hist_fu_580_rst_ce1;
wire    grp_calc_hist_fu_580_rst_we1;
wire   [15:0] grp_calc_hist_fu_580_rst_d1;
reg   [10:0] ap_phi_mux_indvar_flatten_phi_fu_528_p4;
reg   [5:0] invdar_reg_558;
wire   [0:0] tmp_5_fu_899_p2;
wire    ap_CS_fsm_state29;
reg    ap_reg_grp_calc_hist_fu_580_ap_start;
wire    ap_CS_fsm_state31;
wire   [63:0] tmp_s_fu_869_p1;
wire   [63:0] tmp_4_fu_894_p1;
wire   [63:0] tmp_11_fu_917_p1;
wire   [63:0] tmp_3_fu_611_p1;
wire  signed [63:0] imageptr2_sum_cast_fu_844_p1;
reg    ap_reg_ioackin_INPUT_IMAGE_ARREADY;
reg    ap_block_pp0_stage0_01001;
reg    ap_reg_ioackin_FEATURE_AWREADY;
reg    ap_reg_ioackin_FEATURE_WREADY;
wire    ap_block_pp1_stage0_01001;
wire   [30:0] feature3_fu_601_p4;
wire   [31:0] i_cast7_fu_625_p1;
wire   [3:0] tmp_10_fu_634_p1;
wire   [10:0] p_shl3_fu_638_p3;
wire   [8:0] p_shl4_fu_650_p3;
wire   [11:0] p_shl3_cast_fu_646_p1;
wire   [11:0] p_shl4_cast_fu_658_p1;
wire   [4:0] i_s_fu_694_p2;
wire   [31:0] i_cast7_mid1_fu_700_p1;
wire   [3:0] tmp_14_fu_709_p1;
wire   [10:0] p_shl3_mid1_fu_713_p3;
wire   [8:0] p_shl4_mid1_fu_725_p3;
wire   [11:0] p_shl3_cast_mid1_fu_721_p1;
wire   [11:0] p_shl4_cast_mid1_fu_733_p1;
wire   [11:0] tmp_8_mid1_fu_737_p2;
wire   [11:0] tmp_8_fu_662_p2;
wire   [7:0] grp_fu_765_p1;
wire  signed [13:0] tmp_8_cast_cast_mid2_fu_779_p1;
wire   [13:0] indvar_cast4_cast_fu_782_p1;
wire   [7:0] grp_fu_794_p1;
wire   [31:0] tmp_2_fu_799_p2;
wire   [31:0] tmp_7_fu_803_p2;
wire   [31:0] tmp_12_fu_819_p2;
wire   [31:0] offset_mid1_fu_824_p2;
wire   [31:0] tmp_13_fu_829_p3;
wire  signed [32:0] tmp_3_mid2_cast_fu_835_p1;
wire   [32:0] imageptr2_sum_fu_839_p2;
wire   [29:0] grp_fu_922_p2;
wire   [10:0] grp_fu_765_p2;
wire   [13:0] grp_fu_922_p0;
wire   [15:0] grp_fu_922_p1;
reg    grp_fu_765_ce;
reg    grp_fu_771_ce;
reg    grp_fu_775_ce;
reg    grp_fu_794_ce;
reg    grp_fu_922_ce;
reg   [14:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
wire   [29:0] grp_fu_922_p00;

// power-on initialization
initial begin
#0 ap_CS_fsm = 15'd1;
#0 ap_enable_reg_pp0_iter15 = 1'b0;
#0 ap_enable_reg_pp0_iter22 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_enable_reg_pp0_iter14 = 1'b0;
#0 ap_enable_reg_pp0_iter16 = 1'b0;
#0 ap_enable_reg_pp0_iter17 = 1'b0;
#0 ap_enable_reg_pp0_iter18 = 1'b0;
#0 ap_enable_reg_pp0_iter19 = 1'b0;
#0 ap_enable_reg_pp0_iter20 = 1'b0;
#0 ap_enable_reg_pp0_iter21 = 1'b0;
#0 ap_enable_reg_pp0_iter23 = 1'b0;
#0 ap_reg_grp_calc_hist_fu_580_ap_start = 1'b0;
#0 ap_reg_ioackin_INPUT_IMAGE_ARREADY = 1'b0;
#0 ap_reg_ioackin_FEATURE_AWREADY = 1'b0;
#0 ap_reg_ioackin_FEATURE_WREADY = 1'b0;
end

color_hist_CONTROL_BUS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_BUS_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_BUS_DATA_WIDTH ))
color_hist_CONTROL_BUS_s_axi_U(
    .AWVALID(s_axi_CONTROL_BUS_AWVALID),
    .AWREADY(s_axi_CONTROL_BUS_AWREADY),
    .AWADDR(s_axi_CONTROL_BUS_AWADDR),
    .WVALID(s_axi_CONTROL_BUS_WVALID),
    .WREADY(s_axi_CONTROL_BUS_WREADY),
    .WDATA(s_axi_CONTROL_BUS_WDATA),
    .WSTRB(s_axi_CONTROL_BUS_WSTRB),
    .ARVALID(s_axi_CONTROL_BUS_ARVALID),
    .ARREADY(s_axi_CONTROL_BUS_ARREADY),
    .ARADDR(s_axi_CONTROL_BUS_ARADDR),
    .RVALID(s_axi_CONTROL_BUS_RVALID),
    .RREADY(s_axi_CONTROL_BUS_RREADY),
    .RDATA(s_axi_CONTROL_BUS_RDATA),
    .RRESP(s_axi_CONTROL_BUS_RRESP),
    .BVALID(s_axi_CONTROL_BUS_BVALID),
    .BREADY(s_axi_CONTROL_BUS_BREADY),
    .BRESP(s_axi_CONTROL_BUS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .imageptr(imageptr),
    .feature_r(feature_r)
);

color_hist_SPECS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_SPECS_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_SPECS_DATA_WIDTH ))
color_hist_SPECS_s_axi_U(
    .AWVALID(s_axi_SPECS_AWVALID),
    .AWREADY(s_axi_SPECS_AWREADY),
    .AWADDR(s_axi_SPECS_AWADDR),
    .WVALID(s_axi_SPECS_WVALID),
    .WREADY(s_axi_SPECS_WREADY),
    .WDATA(s_axi_SPECS_WDATA),
    .WSTRB(s_axi_SPECS_WSTRB),
    .ARVALID(s_axi_SPECS_ARVALID),
    .ARREADY(s_axi_SPECS_ARREADY),
    .ARADDR(s_axi_SPECS_ARADDR),
    .RVALID(s_axi_SPECS_RVALID),
    .RREADY(s_axi_SPECS_RREADY),
    .RDATA(s_axi_SPECS_RDATA),
    .RRESP(s_axi_SPECS_RRESP),
    .BVALID(s_axi_SPECS_BVALID),
    .BREADY(s_axi_SPECS_BREADY),
    .BRESP(s_axi_SPECS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .specs_address0(specs_address0),
    .specs_ce0(specs_ce0),
    .specs_q0(specs_q0)
);

color_hist_INPUT_IMAGE_m_axi #(
    .USER_DW( 8 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_INPUT_IMAGE_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_INPUT_IMAGE_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_INPUT_IMAGE_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_INPUT_IMAGE_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_INPUT_IMAGE_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_INPUT_IMAGE_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_INPUT_IMAGE_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_INPUT_IMAGE_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_INPUT_IMAGE_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_INPUT_IMAGE_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_INPUT_IMAGE_CACHE_VALUE ))
color_hist_INPUT_IMAGE_m_axi_U(
    .AWVALID(m_axi_INPUT_IMAGE_AWVALID),
    .AWREADY(m_axi_INPUT_IMAGE_AWREADY),
    .AWADDR(m_axi_INPUT_IMAGE_AWADDR),
    .AWID(m_axi_INPUT_IMAGE_AWID),
    .AWLEN(m_axi_INPUT_IMAGE_AWLEN),
    .AWSIZE(m_axi_INPUT_IMAGE_AWSIZE),
    .AWBURST(m_axi_INPUT_IMAGE_AWBURST),
    .AWLOCK(m_axi_INPUT_IMAGE_AWLOCK),
    .AWCACHE(m_axi_INPUT_IMAGE_AWCACHE),
    .AWPROT(m_axi_INPUT_IMAGE_AWPROT),
    .AWQOS(m_axi_INPUT_IMAGE_AWQOS),
    .AWREGION(m_axi_INPUT_IMAGE_AWREGION),
    .AWUSER(m_axi_INPUT_IMAGE_AWUSER),
    .WVALID(m_axi_INPUT_IMAGE_WVALID),
    .WREADY(m_axi_INPUT_IMAGE_WREADY),
    .WDATA(m_axi_INPUT_IMAGE_WDATA),
    .WSTRB(m_axi_INPUT_IMAGE_WSTRB),
    .WLAST(m_axi_INPUT_IMAGE_WLAST),
    .WID(m_axi_INPUT_IMAGE_WID),
    .WUSER(m_axi_INPUT_IMAGE_WUSER),
    .ARVALID(m_axi_INPUT_IMAGE_ARVALID),
    .ARREADY(m_axi_INPUT_IMAGE_ARREADY),
    .ARADDR(m_axi_INPUT_IMAGE_ARADDR),
    .ARID(m_axi_INPUT_IMAGE_ARID),
    .ARLEN(m_axi_INPUT_IMAGE_ARLEN),
    .ARSIZE(m_axi_INPUT_IMAGE_ARSIZE),
    .ARBURST(m_axi_INPUT_IMAGE_ARBURST),
    .ARLOCK(m_axi_INPUT_IMAGE_ARLOCK),
    .ARCACHE(m_axi_INPUT_IMAGE_ARCACHE),
    .ARPROT(m_axi_INPUT_IMAGE_ARPROT),
    .ARQOS(m_axi_INPUT_IMAGE_ARQOS),
    .ARREGION(m_axi_INPUT_IMAGE_ARREGION),
    .ARUSER(m_axi_INPUT_IMAGE_ARUSER),
    .RVALID(m_axi_INPUT_IMAGE_RVALID),
    .RREADY(m_axi_INPUT_IMAGE_RREADY),
    .RDATA(m_axi_INPUT_IMAGE_RDATA),
    .RLAST(m_axi_INPUT_IMAGE_RLAST),
    .RID(m_axi_INPUT_IMAGE_RID),
    .RUSER(m_axi_INPUT_IMAGE_RUSER),
    .RRESP(m_axi_INPUT_IMAGE_RRESP),
    .BVALID(m_axi_INPUT_IMAGE_BVALID),
    .BREADY(m_axi_INPUT_IMAGE_BREADY),
    .BRESP(m_axi_INPUT_IMAGE_BRESP),
    .BID(m_axi_INPUT_IMAGE_BID),
    .BUSER(m_axi_INPUT_IMAGE_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(INPUT_IMAGE_ARVALID),
    .I_ARREADY(INPUT_IMAGE_ARREADY),
    .I_ARADDR(ap_reg_pp0_iter14_INPUT_IMAGE_addr_reg_1049),
    .I_ARID(1'd0),
    .I_ARLEN(32'd96),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(INPUT_IMAGE_RVALID),
    .I_RREADY(INPUT_IMAGE_RREADY),
    .I_RDATA(INPUT_IMAGE_RDATA),
    .I_RID(INPUT_IMAGE_RID),
    .I_RUSER(INPUT_IMAGE_RUSER),
    .I_RRESP(INPUT_IMAGE_RRESP),
    .I_RLAST(INPUT_IMAGE_RLAST),
    .I_AWVALID(1'b0),
    .I_AWREADY(INPUT_IMAGE_AWREADY),
    .I_AWADDR(32'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd0),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(1'b0),
    .I_WREADY(INPUT_IMAGE_WREADY),
    .I_WDATA(8'd0),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(1'd0),
    .I_BVALID(INPUT_IMAGE_BVALID),
    .I_BREADY(1'b0),
    .I_BRESP(INPUT_IMAGE_BRESP),
    .I_BID(INPUT_IMAGE_BID),
    .I_BUSER(INPUT_IMAGE_BUSER)
);

color_hist_FEATURE_m_axi #(
    .USER_DW( 16 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_FEATURE_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_FEATURE_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_FEATURE_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_FEATURE_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_FEATURE_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_FEATURE_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_FEATURE_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_FEATURE_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_FEATURE_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_FEATURE_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_FEATURE_CACHE_VALUE ))
color_hist_FEATURE_m_axi_U(
    .AWVALID(m_axi_FEATURE_AWVALID),
    .AWREADY(m_axi_FEATURE_AWREADY),
    .AWADDR(m_axi_FEATURE_AWADDR),
    .AWID(m_axi_FEATURE_AWID),
    .AWLEN(m_axi_FEATURE_AWLEN),
    .AWSIZE(m_axi_FEATURE_AWSIZE),
    .AWBURST(m_axi_FEATURE_AWBURST),
    .AWLOCK(m_axi_FEATURE_AWLOCK),
    .AWCACHE(m_axi_FEATURE_AWCACHE),
    .AWPROT(m_axi_FEATURE_AWPROT),
    .AWQOS(m_axi_FEATURE_AWQOS),
    .AWREGION(m_axi_FEATURE_AWREGION),
    .AWUSER(m_axi_FEATURE_AWUSER),
    .WVALID(m_axi_FEATURE_WVALID),
    .WREADY(m_axi_FEATURE_WREADY),
    .WDATA(m_axi_FEATURE_WDATA),
    .WSTRB(m_axi_FEATURE_WSTRB),
    .WLAST(m_axi_FEATURE_WLAST),
    .WID(m_axi_FEATURE_WID),
    .WUSER(m_axi_FEATURE_WUSER),
    .ARVALID(m_axi_FEATURE_ARVALID),
    .ARREADY(m_axi_FEATURE_ARREADY),
    .ARADDR(m_axi_FEATURE_ARADDR),
    .ARID(m_axi_FEATURE_ARID),
    .ARLEN(m_axi_FEATURE_ARLEN),
    .ARSIZE(m_axi_FEATURE_ARSIZE),
    .ARBURST(m_axi_FEATURE_ARBURST),
    .ARLOCK(m_axi_FEATURE_ARLOCK),
    .ARCACHE(m_axi_FEATURE_ARCACHE),
    .ARPROT(m_axi_FEATURE_ARPROT),
    .ARQOS(m_axi_FEATURE_ARQOS),
    .ARREGION(m_axi_FEATURE_ARREGION),
    .ARUSER(m_axi_FEATURE_ARUSER),
    .RVALID(m_axi_FEATURE_RVALID),
    .RREADY(m_axi_FEATURE_RREADY),
    .RDATA(m_axi_FEATURE_RDATA),
    .RLAST(m_axi_FEATURE_RLAST),
    .RID(m_axi_FEATURE_RID),
    .RUSER(m_axi_FEATURE_RUSER),
    .RRESP(m_axi_FEATURE_RRESP),
    .BVALID(m_axi_FEATURE_BVALID),
    .BREADY(m_axi_FEATURE_BREADY),
    .BRESP(m_axi_FEATURE_BRESP),
    .BID(m_axi_FEATURE_BID),
    .BUSER(m_axi_FEATURE_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(1'b0),
    .I_ARREADY(FEATURE_ARREADY),
    .I_ARADDR(32'd0),
    .I_ARID(1'd0),
    .I_ARLEN(32'd0),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(FEATURE_RVALID),
    .I_RREADY(1'b0),
    .I_RDATA(FEATURE_RDATA),
    .I_RID(FEATURE_RID),
    .I_RUSER(FEATURE_RUSER),
    .I_RRESP(FEATURE_RRESP),
    .I_RLAST(FEATURE_RLAST),
    .I_AWVALID(FEATURE_AWVALID),
    .I_AWREADY(FEATURE_AWREADY),
    .I_AWADDR(FEATURE_addr_reg_956),
    .I_AWID(1'd0),
    .I_AWLEN(32'd36),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(FEATURE_WVALID),
    .I_WREADY(FEATURE_WREADY),
    .I_WDATA(rst_load_reg_1110),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(2'd3),
    .I_BVALID(FEATURE_BVALID),
    .I_BREADY(FEATURE_BREADY),
    .I_BRESP(FEATURE_BRESP),
    .I_BID(FEATURE_BID),
    .I_BUSER(FEATURE_BUSER)
);

color_hist_image_cud #(
    .DataWidth( 8 ),
    .AddressRange( 96 ),
    .AddressWidth( 7 ))
image_buffer_0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(image_buffer_0_address0),
    .ce0(image_buffer_0_ce0),
    .we0(image_buffer_0_we0),
    .d0(INPUT_IMAGE_addr_rea_reg_1063),
    .q0(image_buffer_0_q0)
);

color_hist_image_cud #(
    .DataWidth( 8 ),
    .AddressRange( 96 ),
    .AddressWidth( 7 ))
image_buffer_1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(image_buffer_1_address0),
    .ce0(image_buffer_1_ce0),
    .we0(image_buffer_1_we0),
    .d0(INPUT_IMAGE_addr_rea_reg_1063),
    .q0(image_buffer_1_q0)
);

color_hist_image_cud #(
    .DataWidth( 8 ),
    .AddressRange( 96 ),
    .AddressWidth( 7 ))
image_buffer_2_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(image_buffer_2_address0),
    .ce0(image_buffer_2_ce0),
    .we0(image_buffer_2_we0),
    .d0(INPUT_IMAGE_addr_rea_reg_1063),
    .q0(image_buffer_2_q0)
);

color_hist_image_cud #(
    .DataWidth( 8 ),
    .AddressRange( 96 ),
    .AddressWidth( 7 ))
image_buffer_3_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(image_buffer_3_address0),
    .ce0(image_buffer_3_ce0),
    .we0(image_buffer_3_we0),
    .d0(INPUT_IMAGE_addr_rea_reg_1063),
    .q0(image_buffer_3_q0)
);

color_hist_image_cud #(
    .DataWidth( 8 ),
    .AddressRange( 96 ),
    .AddressWidth( 7 ))
image_buffer_4_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(image_buffer_4_address0),
    .ce0(image_buffer_4_ce0),
    .we0(image_buffer_4_we0),
    .d0(INPUT_IMAGE_addr_rea_reg_1063),
    .q0(image_buffer_4_q0)
);

color_hist_image_cud #(
    .DataWidth( 8 ),
    .AddressRange( 96 ),
    .AddressWidth( 7 ))
image_buffer_5_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(image_buffer_5_address0),
    .ce0(image_buffer_5_ce0),
    .we0(image_buffer_5_we0),
    .d0(INPUT_IMAGE_addr_rea_reg_1063),
    .q0(image_buffer_5_q0)
);

color_hist_image_cud #(
    .DataWidth( 8 ),
    .AddressRange( 96 ),
    .AddressWidth( 7 ))
image_buffer_6_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(image_buffer_6_address0),
    .ce0(image_buffer_6_ce0),
    .we0(image_buffer_6_we0),
    .d0(INPUT_IMAGE_addr_rea_reg_1063),
    .q0(image_buffer_6_q0)
);

color_hist_image_cud #(
    .DataWidth( 8 ),
    .AddressRange( 96 ),
    .AddressWidth( 7 ))
image_buffer_7_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(image_buffer_7_address0),
    .ce0(image_buffer_7_ce0),
    .we0(image_buffer_7_we0),
    .d0(INPUT_IMAGE_addr_rea_reg_1063),
    .q0(image_buffer_7_q0)
);

color_hist_image_cud #(
    .DataWidth( 8 ),
    .AddressRange( 96 ),
    .AddressWidth( 7 ))
image_buffer_8_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(image_buffer_8_address0),
    .ce0(image_buffer_8_ce0),
    .we0(image_buffer_8_we0),
    .d0(INPUT_IMAGE_addr_rea_reg_1063),
    .q0(image_buffer_8_q0)
);

color_hist_image_cud #(
    .DataWidth( 8 ),
    .AddressRange( 96 ),
    .AddressWidth( 7 ))
image_buffer_9_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(image_buffer_9_address0),
    .ce0(image_buffer_9_ce0),
    .we0(image_buffer_9_we0),
    .d0(INPUT_IMAGE_addr_rea_reg_1063),
    .q0(image_buffer_9_q0)
);

color_hist_image_cud #(
    .DataWidth( 8 ),
    .AddressRange( 96 ),
    .AddressWidth( 7 ))
image_buffer_10_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(image_buffer_10_address0),
    .ce0(image_buffer_10_ce0),
    .we0(image_buffer_10_we0),
    .d0(INPUT_IMAGE_addr_rea_reg_1063),
    .q0(image_buffer_10_q0)
);

color_hist_image_cud #(
    .DataWidth( 8 ),
    .AddressRange( 96 ),
    .AddressWidth( 7 ))
image_buffer_11_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(image_buffer_11_address0),
    .ce0(image_buffer_11_ce0),
    .we0(image_buffer_11_we0),
    .d0(INPUT_IMAGE_addr_rea_reg_1063),
    .q0(image_buffer_11_q0)
);

color_hist_image_cud #(
    .DataWidth( 8 ),
    .AddressRange( 96 ),
    .AddressWidth( 7 ))
image_buffer_12_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(image_buffer_12_address0),
    .ce0(image_buffer_12_ce0),
    .we0(image_buffer_12_we0),
    .d0(INPUT_IMAGE_addr_rea_reg_1063),
    .q0(image_buffer_12_q0)
);

color_hist_image_cud #(
    .DataWidth( 8 ),
    .AddressRange( 96 ),
    .AddressWidth( 7 ))
image_buffer_13_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(image_buffer_13_address0),
    .ce0(image_buffer_13_ce0),
    .we0(image_buffer_13_we0),
    .d0(INPUT_IMAGE_addr_rea_reg_1063),
    .q0(image_buffer_13_q0)
);

color_hist_image_cud #(
    .DataWidth( 8 ),
    .AddressRange( 96 ),
    .AddressWidth( 7 ))
image_buffer_14_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(image_buffer_14_address0),
    .ce0(image_buffer_14_ce0),
    .we0(image_buffer_14_we0),
    .d0(INPUT_IMAGE_addr_rea_reg_1063),
    .q0(image_buffer_14_q0)
);

color_hist_image_cud #(
    .DataWidth( 8 ),
    .AddressRange( 96 ),
    .AddressWidth( 7 ))
image_buffer_15_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(image_buffer_15_address0),
    .ce0(image_buffer_15_ce0),
    .we0(image_buffer_15_we0),
    .d0(INPUT_IMAGE_addr_rea_reg_1063),
    .q0(image_buffer_15_q0)
);

color_hist_rst #(
    .DataWidth( 16 ),
    .AddressRange( 36 ),
    .AddressWidth( 6 ))
rst_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(rst_address0),
    .ce0(rst_ce0),
    .we0(rst_we0),
    .d0(16'd0),
    .q0(rst_q0),
    .address1(grp_calc_hist_fu_580_rst_address1),
    .ce1(rst_ce1),
    .we1(rst_we1),
    .d1(grp_calc_hist_fu_580_rst_d1)
);

calc_hist grp_calc_hist_fu_580(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_calc_hist_fu_580_ap_start),
    .ap_done(grp_calc_hist_fu_580_ap_done),
    .ap_idle(grp_calc_hist_fu_580_ap_idle),
    .ap_ready(grp_calc_hist_fu_580_ap_ready),
    .image_buffer_0_address0(grp_calc_hist_fu_580_image_buffer_0_address0),
    .image_buffer_0_ce0(grp_calc_hist_fu_580_image_buffer_0_ce0),
    .image_buffer_0_q0(image_buffer_0_q0),
    .image_buffer_1_address0(grp_calc_hist_fu_580_image_buffer_1_address0),
    .image_buffer_1_ce0(grp_calc_hist_fu_580_image_buffer_1_ce0),
    .image_buffer_1_q0(image_buffer_1_q0),
    .image_buffer_2_address0(grp_calc_hist_fu_580_image_buffer_2_address0),
    .image_buffer_2_ce0(grp_calc_hist_fu_580_image_buffer_2_ce0),
    .image_buffer_2_q0(image_buffer_2_q0),
    .image_buffer_3_address0(grp_calc_hist_fu_580_image_buffer_3_address0),
    .image_buffer_3_ce0(grp_calc_hist_fu_580_image_buffer_3_ce0),
    .image_buffer_3_q0(image_buffer_3_q0),
    .image_buffer_4_address0(grp_calc_hist_fu_580_image_buffer_4_address0),
    .image_buffer_4_ce0(grp_calc_hist_fu_580_image_buffer_4_ce0),
    .image_buffer_4_q0(image_buffer_4_q0),
    .image_buffer_5_address0(grp_calc_hist_fu_580_image_buffer_5_address0),
    .image_buffer_5_ce0(grp_calc_hist_fu_580_image_buffer_5_ce0),
    .image_buffer_5_q0(image_buffer_5_q0),
    .image_buffer_6_address0(grp_calc_hist_fu_580_image_buffer_6_address0),
    .image_buffer_6_ce0(grp_calc_hist_fu_580_image_buffer_6_ce0),
    .image_buffer_6_q0(image_buffer_6_q0),
    .image_buffer_7_address0(grp_calc_hist_fu_580_image_buffer_7_address0),
    .image_buffer_7_ce0(grp_calc_hist_fu_580_image_buffer_7_ce0),
    .image_buffer_7_q0(image_buffer_7_q0),
    .image_buffer_8_address0(grp_calc_hist_fu_580_image_buffer_8_address0),
    .image_buffer_8_ce0(grp_calc_hist_fu_580_image_buffer_8_ce0),
    .image_buffer_8_q0(image_buffer_8_q0),
    .image_buffer_9_address0(grp_calc_hist_fu_580_image_buffer_9_address0),
    .image_buffer_9_ce0(grp_calc_hist_fu_580_image_buffer_9_ce0),
    .image_buffer_9_q0(image_buffer_9_q0),
    .image_buffer_10_address0(grp_calc_hist_fu_580_image_buffer_10_address0),
    .image_buffer_10_ce0(grp_calc_hist_fu_580_image_buffer_10_ce0),
    .image_buffer_10_q0(image_buffer_10_q0),
    .image_buffer_11_address0(grp_calc_hist_fu_580_image_buffer_11_address0),
    .image_buffer_11_ce0(grp_calc_hist_fu_580_image_buffer_11_ce0),
    .image_buffer_11_q0(image_buffer_11_q0),
    .image_buffer_12_address0(grp_calc_hist_fu_580_image_buffer_12_address0),
    .image_buffer_12_ce0(grp_calc_hist_fu_580_image_buffer_12_ce0),
    .image_buffer_12_q0(image_buffer_12_q0),
    .image_buffer_13_address0(grp_calc_hist_fu_580_image_buffer_13_address0),
    .image_buffer_13_ce0(grp_calc_hist_fu_580_image_buffer_13_ce0),
    .image_buffer_13_q0(image_buffer_13_q0),
    .image_buffer_14_address0(grp_calc_hist_fu_580_image_buffer_14_address0),
    .image_buffer_14_ce0(grp_calc_hist_fu_580_image_buffer_14_ce0),
    .image_buffer_14_q0(image_buffer_14_q0),
    .image_buffer_15_address0(grp_calc_hist_fu_580_image_buffer_15_address0),
    .image_buffer_15_ce0(grp_calc_hist_fu_580_image_buffer_15_ce0),
    .image_buffer_15_q0(image_buffer_15_q0),
    .rst_address0(grp_calc_hist_fu_580_rst_address0),
    .rst_ce0(grp_calc_hist_fu_580_rst_ce0),
    .rst_q0(rst_q0),
    .rst_address1(grp_calc_hist_fu_580_rst_address1),
    .rst_ce1(grp_calc_hist_fu_580_rst_ce1),
    .rst_we1(grp_calc_hist_fu_580_rst_we1),
    .rst_d1(grp_calc_hist_fu_580_rst_d1)
);

color_hist_urem_1sc4 #(
    .ID( 1 ),
    .NUM_STAGE( 15 ),
    .din0_WIDTH( 11 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 11 ))
color_hist_urem_1sc4_U20(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(ap_phi_mux_indvar_flatten_phi_fu_528_p4),
    .din1(grp_fu_765_p1),
    .ce(grp_fu_765_ce),
    .dout(grp_fu_765_p2)
);

color_hist_mul_32tde #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
color_hist_mul_32tde_U21(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_reg_973),
    .din1(original_width_reg_967),
    .ce(grp_fu_771_ce),
    .dout(grp_fu_771_p2)
);

color_hist_mul_32tde #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
color_hist_mul_32tde_U22(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_mid1_reg_997),
    .din1(original_width_reg_967),
    .ce(grp_fu_775_ce),
    .dout(grp_fu_775_p2)
);

color_hist_urem_1udo #(
    .ID( 1 ),
    .NUM_STAGE( 18 ),
    .din0_WIDTH( 14 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 14 ))
color_hist_urem_1udo_U23(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(ap_reg_pp0_iter4_tmp_9_reg_1017),
    .din1(grp_fu_794_p1),
    .ce(grp_fu_794_ce),
    .dout(grp_fu_794_p2)
);

color_hist_mul_muvdy #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 14 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 30 ))
color_hist_mul_muvdy_U24(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_922_p0),
    .din1(grp_fu_922_p1),
    .ce(grp_fu_922_ce),
    .dout(grp_fu_922_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_fu_668_p2 == 1'd1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter16 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter17 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter18 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter19 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter20 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter21 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter22 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter23 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_enable_reg_pp0_iter23 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter6_state11)) begin
                ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter5;
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state33) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((~((grp_calc_hist_fu_580_ap_done == 1'b0) | (ap_sig_ioackin_FEATURE_AWREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state32))) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state33)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state33);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end else if ((~((grp_calc_hist_fu_580_ap_done == 1'b0) | (ap_sig_ioackin_FEATURE_AWREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state32))) begin
            ap_enable_reg_pp1_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_grp_calc_hist_fu_580_ap_start <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state31)) begin
            ap_reg_grp_calc_hist_fu_580_ap_start <= 1'b1;
        end else if ((grp_calc_hist_fu_580_ap_ready == 1'b1)) begin
            ap_reg_grp_calc_hist_fu_580_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_FEATURE_AWREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state32)) begin
            if (~((grp_calc_hist_fu_580_ap_done == 1'b0) | (ap_sig_ioackin_FEATURE_AWREADY == 1'b0))) begin
                ap_reg_ioackin_FEATURE_AWREADY <= 1'b0;
            end else if (((grp_calc_hist_fu_580_ap_done == 1'b1) & (1'b1 == FEATURE_AWREADY))) begin
                ap_reg_ioackin_FEATURE_AWREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_FEATURE_WREADY <= 1'b0;
    end else begin
        if (((ap_enable_reg_pp1_iter2 == 1'b1) & (ap_reg_pp1_iter1_exitcond2_reg_1096 == 1'd0))) begin
            if ((1'b0 == ap_block_pp1_stage0_11001)) begin
                ap_reg_ioackin_FEATURE_WREADY <= 1'b0;
            end else if (((1'b1 == FEATURE_WREADY) & (1'b0 == ap_block_pp1_stage0_01001))) begin
                ap_reg_ioackin_FEATURE_WREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_INPUT_IMAGE_ARREADY <= 1'b0;
    end else begin
        if (((ap_enable_reg_pp0_iter15 == 1'b1) & (tmp_16_reg_1059 == 1'd1))) begin
            if ((1'b0 == ap_block_pp0_stage0_11001)) begin
                ap_reg_ioackin_INPUT_IMAGE_ARREADY <= 1'b0;
            end else if (((1'b1 == INPUT_IMAGE_ARREADY) & (1'b0 == ap_block_pp0_stage0_01001))) begin
                ap_reg_ioackin_INPUT_IMAGE_ARREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_fu_668_p2 == 1'd0))) begin
        i_reg_536 <= i_mid2_fu_751_p3;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        i_reg_536 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (exitcond2_fu_905_p2 == 1'd0))) begin
        indvar8_reg_569 <= indvar_next9_fu_911_p2;
    end else if ((~((grp_calc_hist_fu_580_ap_done == 1'b0) | (ap_sig_ioackin_FEATURE_AWREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state32))) begin
        indvar8_reg_569 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_reg_978 == 1'd0))) begin
        indvar_flatten_reg_524 <= indvar_flatten_next_reg_982;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        indvar_flatten_reg_524 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_fu_668_p2 == 1'd0))) begin
        indvar_reg_547 <= indvar_next_fu_759_p2;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        indvar_reg_547 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        invdar_reg_558 <= 6'd0;
    end else if (((1'b1 == ap_CS_fsm_state30) & (tmp_5_fu_899_p2 == 1'd0))) begin
        invdar_reg_558 <= indvarinc_fu_888_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        FEATURE_addr_reg_956[30 : 0] <= tmp_3_fu_611_p1[30 : 0];
        original_width_reg_967 <= specs_q0;
        tmp_10_cast_reg_962 <= tmp_10_cast_fu_621_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        INPUT_IMAGE_addr_rea_reg_1063 <= INPUT_IMAGE_RDATA;
        ap_reg_pp0_iter10_INPUT_IMAGE_addr_reg_1049 <= ap_reg_pp0_iter9_INPUT_IMAGE_addr_reg_1049;
        ap_reg_pp0_iter10_exitcond_flatten_reg_978 <= ap_reg_pp0_iter9_exitcond_flatten_reg_978;
        ap_reg_pp0_iter10_tmp_t_reg_1055 <= ap_reg_pp0_iter9_tmp_t_reg_1055;
        ap_reg_pp0_iter11_INPUT_IMAGE_addr_reg_1049 <= ap_reg_pp0_iter10_INPUT_IMAGE_addr_reg_1049;
        ap_reg_pp0_iter11_exitcond_flatten_reg_978 <= ap_reg_pp0_iter10_exitcond_flatten_reg_978;
        ap_reg_pp0_iter11_tmp_t_reg_1055 <= ap_reg_pp0_iter10_tmp_t_reg_1055;
        ap_reg_pp0_iter12_INPUT_IMAGE_addr_reg_1049 <= ap_reg_pp0_iter11_INPUT_IMAGE_addr_reg_1049;
        ap_reg_pp0_iter12_exitcond_flatten_reg_978 <= ap_reg_pp0_iter11_exitcond_flatten_reg_978;
        ap_reg_pp0_iter12_tmp_t_reg_1055 <= ap_reg_pp0_iter11_tmp_t_reg_1055;
        ap_reg_pp0_iter13_INPUT_IMAGE_addr_reg_1049 <= ap_reg_pp0_iter12_INPUT_IMAGE_addr_reg_1049;
        ap_reg_pp0_iter13_exitcond_flatten_reg_978 <= ap_reg_pp0_iter12_exitcond_flatten_reg_978;
        ap_reg_pp0_iter13_tmp_t_reg_1055 <= ap_reg_pp0_iter12_tmp_t_reg_1055;
        ap_reg_pp0_iter14_INPUT_IMAGE_addr_reg_1049 <= ap_reg_pp0_iter13_INPUT_IMAGE_addr_reg_1049;
        ap_reg_pp0_iter14_tmp_t_reg_1055 <= ap_reg_pp0_iter13_tmp_t_reg_1055;
        ap_reg_pp0_iter15_tmp_t_reg_1055 <= ap_reg_pp0_iter14_tmp_t_reg_1055;
        ap_reg_pp0_iter16_tmp_t_reg_1055 <= ap_reg_pp0_iter15_tmp_t_reg_1055;
        ap_reg_pp0_iter17_tmp_t_reg_1055 <= ap_reg_pp0_iter16_tmp_t_reg_1055;
        ap_reg_pp0_iter18_tmp_t_reg_1055 <= ap_reg_pp0_iter17_tmp_t_reg_1055;
        ap_reg_pp0_iter19_tmp_t_reg_1055 <= ap_reg_pp0_iter18_tmp_t_reg_1055;
        ap_reg_pp0_iter20_tmp_t_reg_1055 <= ap_reg_pp0_iter19_tmp_t_reg_1055;
        ap_reg_pp0_iter21_tmp_t_reg_1055 <= ap_reg_pp0_iter20_tmp_t_reg_1055;
        ap_reg_pp0_iter22_tmp_t_reg_1055 <= ap_reg_pp0_iter21_tmp_t_reg_1055;
        ap_reg_pp0_iter2_exitcond_flatten_reg_978 <= ap_reg_pp0_iter1_exitcond_flatten_reg_978;
        ap_reg_pp0_iter2_exitcond_reg_987 <= ap_reg_pp0_iter1_exitcond_reg_987;
        ap_reg_pp0_iter2_tmp_9_reg_1017 <= tmp_9_reg_1017;
        ap_reg_pp0_iter3_exitcond_flatten_reg_978 <= ap_reg_pp0_iter2_exitcond_flatten_reg_978;
        ap_reg_pp0_iter3_exitcond_reg_987 <= ap_reg_pp0_iter2_exitcond_reg_987;
        ap_reg_pp0_iter3_tmp_9_reg_1017 <= ap_reg_pp0_iter2_tmp_9_reg_1017;
        ap_reg_pp0_iter4_exitcond_flatten_reg_978 <= ap_reg_pp0_iter3_exitcond_flatten_reg_978;
        ap_reg_pp0_iter4_exitcond_reg_987 <= ap_reg_pp0_iter3_exitcond_reg_987;
        ap_reg_pp0_iter4_tmp_9_reg_1017 <= ap_reg_pp0_iter3_tmp_9_reg_1017;
        ap_reg_pp0_iter5_exitcond_flatten_reg_978 <= ap_reg_pp0_iter4_exitcond_flatten_reg_978;
        ap_reg_pp0_iter5_exitcond_reg_987 <= ap_reg_pp0_iter4_exitcond_reg_987;
        ap_reg_pp0_iter6_exitcond_flatten_reg_978 <= ap_reg_pp0_iter5_exitcond_flatten_reg_978;
        ap_reg_pp0_iter6_exitcond_reg_987 <= ap_reg_pp0_iter5_exitcond_reg_987;
        ap_reg_pp0_iter7_exitcond_flatten_reg_978 <= ap_reg_pp0_iter6_exitcond_flatten_reg_978;
        ap_reg_pp0_iter8_INPUT_IMAGE_addr_reg_1049 <= INPUT_IMAGE_addr_reg_1049;
        ap_reg_pp0_iter8_exitcond_flatten_reg_978 <= ap_reg_pp0_iter7_exitcond_flatten_reg_978;
        ap_reg_pp0_iter8_tmp_t_reg_1055 <= tmp_t_reg_1055;
        ap_reg_pp0_iter9_INPUT_IMAGE_addr_reg_1049 <= ap_reg_pp0_iter8_INPUT_IMAGE_addr_reg_1049;
        ap_reg_pp0_iter9_exitcond_flatten_reg_978 <= ap_reg_pp0_iter8_exitcond_flatten_reg_978;
        ap_reg_pp0_iter9_tmp_t_reg_1055 <= ap_reg_pp0_iter8_tmp_t_reg_1055;
        tmp_6_reg_1083 <= grp_fu_794_p2;
        tmp_t_reg_1055 <= {{grp_fu_922_p2[24:21]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_reg_pp0_iter6_exitcond_flatten_reg_978 == 1'd0))) begin
        INPUT_IMAGE_addr_reg_1049 <= imageptr2_sum_cast_fu_844_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_reg_pp0_iter1_exitcond_flatten_reg_978 <= exitcond_flatten_reg_978;
        ap_reg_pp0_iter1_exitcond_reg_987 <= exitcond_reg_987;
        exitcond_flatten_reg_978 <= exitcond_flatten_fu_668_p2;
        tmp_reg_973 <= tmp_fu_629_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        ap_reg_pp1_iter1_exitcond2_reg_1096 <= exitcond2_reg_1096;
        exitcond2_reg_1096 <= exitcond2_fu_905_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_fu_668_p2 == 1'd0))) begin
        exitcond_reg_987 <= exitcond_fu_680_p2;
        indvar_mid2_reg_992 <= indvar_mid2_fu_686_p3;
        tmp_8_cast_cast_mid2_1_reg_1002[11 : 5] <= tmp_8_cast_cast_mid2_1_fu_743_p3[11 : 5];
        tmp_mid1_reg_997 <= tmp_mid1_fu_704_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_next_reg_982 <= indvar_flatten_next_fu_674_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_reg_pp0_iter5_exitcond_reg_987 == 1'd0))) begin
        offset_reg_1038 <= offset_fu_809_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (exitcond2_reg_1096 == 1'd0))) begin
        rst_load_reg_1110 <= rst_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_reg_pp0_iter13_exitcond_flatten_reg_978 == 1'd0))) begin
        tmp_16_reg_1059 <= tmp_16_fu_863_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_reg_pp0_iter4_exitcond_flatten_reg_978 == 1'd0) & (ap_reg_pp0_iter4_exitcond_reg_987 == 1'd1))) begin
        tmp_1_mid1_reg_1028 <= grp_fu_775_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_reg_pp0_iter4_exitcond_reg_987 == 1'd0))) begin
        tmp_1_reg_1023 <= grp_fu_771_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_reg_pp0_iter5_exitcond_flatten_reg_978 == 1'd0) & (ap_reg_pp0_iter5_exitcond_reg_987 == 1'd1))) begin
        tmp_2_mid1_reg_1043 <= tmp_2_mid1_fu_815_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_reg_978 == 1'd0))) begin
        tmp_9_reg_1017 <= tmp_9_fu_785_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        x_reg_945 <= specs_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        y_reg_934 <= specs_q0;
    end
end

always @ (*) begin
    if (((grp_calc_hist_fu_580_ap_done == 1'b1) & (ap_reg_ioackin_FEATURE_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state32))) begin
        FEATURE_AWVALID = 1'b1;
    end else begin
        FEATURE_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == FEATURE_BVALID) & (1'b1 == ap_CS_fsm_state40))) begin
        FEATURE_BREADY = 1'b1;
    end else begin
        FEATURE_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_FEATURE_WREADY == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b1) & (ap_reg_pp1_iter1_exitcond2_reg_1096 == 1'd0) & (1'b0 == ap_block_pp1_stage0_01001))) begin
        FEATURE_WVALID = 1'b1;
    end else begin
        FEATURE_WVALID = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        FEATURE_blk_n_AW = m_axi_FEATURE_AWREADY;
    end else begin
        FEATURE_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state40)) begin
        FEATURE_blk_n_B = m_axi_FEATURE_BVALID;
    end else begin
        FEATURE_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (ap_reg_pp1_iter1_exitcond2_reg_1096 == 1'd0) & (1'b0 == ap_block_pp1_stage0))) begin
        FEATURE_blk_n_W = m_axi_FEATURE_WREADY;
    end else begin
        FEATURE_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_INPUT_IMAGE_ARREADY == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b1) & (tmp_16_reg_1059 == 1'd1) & (1'b0 == ap_block_pp0_stage0_01001))) begin
        INPUT_IMAGE_ARVALID = 1'b1;
    end else begin
        INPUT_IMAGE_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter22 == 1'b1))) begin
        INPUT_IMAGE_RREADY = 1'b1;
    end else begin
        INPUT_IMAGE_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter15 == 1'b1) & (tmp_16_reg_1059 == 1'd1) & (1'b0 == ap_block_pp0_stage0))) begin
        INPUT_IMAGE_blk_n_AR = m_axi_INPUT_IMAGE_ARREADY;
    end else begin
        INPUT_IMAGE_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter22 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        INPUT_IMAGE_blk_n_R = m_axi_INPUT_IMAGE_RVALID;
    end else begin
        INPUT_IMAGE_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (ap_enable_reg_pp0_iter5 == 1'b0))) begin
        ap_condition_pp0_exit_iter6_state11 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter6_state11 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond2_fu_905_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state33 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state33 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == FEATURE_BVALID) & (1'b1 == ap_CS_fsm_state40))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter23 == 1'b0) & (ap_enable_reg_pp0_iter21 == 1'b0) & (ap_enable_reg_pp0_iter20 == 1'b0) & (ap_enable_reg_pp0_iter19 == 1'b0) & (ap_enable_reg_pp0_iter18 == 1'b0) & (ap_enable_reg_pp0_iter17 == 1'b0) & (ap_enable_reg_pp0_iter16 == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter22 == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_reg_978 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_indvar_flatten_phi_fu_528_p4 = indvar_flatten_next_reg_982;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_528_p4 = indvar_flatten_reg_524;
    end
end

always @ (*) begin
    if (((1'b1 == FEATURE_BVALID) & (1'b1 == ap_CS_fsm_state40))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_FEATURE_AWREADY == 1'b0)) begin
        ap_sig_ioackin_FEATURE_AWREADY = FEATURE_AWREADY;
    end else begin
        ap_sig_ioackin_FEATURE_AWREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_FEATURE_WREADY == 1'b0)) begin
        ap_sig_ioackin_FEATURE_WREADY = FEATURE_WREADY;
    end else begin
        ap_sig_ioackin_FEATURE_WREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_INPUT_IMAGE_ARREADY == 1'b0)) begin
        ap_sig_ioackin_INPUT_IMAGE_ARREADY = INPUT_IMAGE_ARREADY;
    end else begin
        ap_sig_ioackin_INPUT_IMAGE_ARREADY = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_765_ce = 1'b1;
    end else begin
        grp_fu_765_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_771_ce = 1'b1;
    end else begin
        grp_fu_771_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_775_ce = 1'b1;
    end else begin
        grp_fu_775_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_794_ce = 1'b1;
    end else begin
        grp_fu_794_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_922_ce = 1'b1;
    end else begin
        grp_fu_922_ce = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter23 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        image_buffer_0_address0 = tmp_s_fu_869_p1;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        image_buffer_0_address0 = grp_calc_hist_fu_580_image_buffer_0_address0;
    end else begin
        image_buffer_0_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter23 == 1'b1))) begin
        image_buffer_0_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        image_buffer_0_ce0 = grp_calc_hist_fu_580_image_buffer_0_ce0;
    end else begin
        image_buffer_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_reg_pp0_iter22_tmp_t_reg_1055 == 4'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter23 == 1'b1))) begin
        image_buffer_0_we0 = 1'b1;
    end else begin
        image_buffer_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter23 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        image_buffer_10_address0 = tmp_s_fu_869_p1;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        image_buffer_10_address0 = grp_calc_hist_fu_580_image_buffer_10_address0;
    end else begin
        image_buffer_10_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter23 == 1'b1))) begin
        image_buffer_10_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        image_buffer_10_ce0 = grp_calc_hist_fu_580_image_buffer_10_ce0;
    end else begin
        image_buffer_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_reg_pp0_iter22_tmp_t_reg_1055 == 4'd10) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter23 == 1'b1))) begin
        image_buffer_10_we0 = 1'b1;
    end else begin
        image_buffer_10_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter23 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        image_buffer_11_address0 = tmp_s_fu_869_p1;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        image_buffer_11_address0 = grp_calc_hist_fu_580_image_buffer_11_address0;
    end else begin
        image_buffer_11_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter23 == 1'b1))) begin
        image_buffer_11_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        image_buffer_11_ce0 = grp_calc_hist_fu_580_image_buffer_11_ce0;
    end else begin
        image_buffer_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_reg_pp0_iter22_tmp_t_reg_1055 == 4'd11) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter23 == 1'b1))) begin
        image_buffer_11_we0 = 1'b1;
    end else begin
        image_buffer_11_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter23 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        image_buffer_12_address0 = tmp_s_fu_869_p1;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        image_buffer_12_address0 = grp_calc_hist_fu_580_image_buffer_12_address0;
    end else begin
        image_buffer_12_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter23 == 1'b1))) begin
        image_buffer_12_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        image_buffer_12_ce0 = grp_calc_hist_fu_580_image_buffer_12_ce0;
    end else begin
        image_buffer_12_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_reg_pp0_iter22_tmp_t_reg_1055 == 4'd12) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter23 == 1'b1))) begin
        image_buffer_12_we0 = 1'b1;
    end else begin
        image_buffer_12_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter23 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        image_buffer_13_address0 = tmp_s_fu_869_p1;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        image_buffer_13_address0 = grp_calc_hist_fu_580_image_buffer_13_address0;
    end else begin
        image_buffer_13_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter23 == 1'b1))) begin
        image_buffer_13_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        image_buffer_13_ce0 = grp_calc_hist_fu_580_image_buffer_13_ce0;
    end else begin
        image_buffer_13_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_reg_pp0_iter22_tmp_t_reg_1055 == 4'd13) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter23 == 1'b1))) begin
        image_buffer_13_we0 = 1'b1;
    end else begin
        image_buffer_13_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter23 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        image_buffer_14_address0 = tmp_s_fu_869_p1;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        image_buffer_14_address0 = grp_calc_hist_fu_580_image_buffer_14_address0;
    end else begin
        image_buffer_14_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter23 == 1'b1))) begin
        image_buffer_14_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        image_buffer_14_ce0 = grp_calc_hist_fu_580_image_buffer_14_ce0;
    end else begin
        image_buffer_14_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_reg_pp0_iter22_tmp_t_reg_1055 == 4'd14) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter23 == 1'b1))) begin
        image_buffer_14_we0 = 1'b1;
    end else begin
        image_buffer_14_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter23 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        image_buffer_15_address0 = tmp_s_fu_869_p1;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        image_buffer_15_address0 = grp_calc_hist_fu_580_image_buffer_15_address0;
    end else begin
        image_buffer_15_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter23 == 1'b1))) begin
        image_buffer_15_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        image_buffer_15_ce0 = grp_calc_hist_fu_580_image_buffer_15_ce0;
    end else begin
        image_buffer_15_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_reg_pp0_iter22_tmp_t_reg_1055 == 4'd15) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter23 == 1'b1))) begin
        image_buffer_15_we0 = 1'b1;
    end else begin
        image_buffer_15_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter23 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        image_buffer_1_address0 = tmp_s_fu_869_p1;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        image_buffer_1_address0 = grp_calc_hist_fu_580_image_buffer_1_address0;
    end else begin
        image_buffer_1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter23 == 1'b1))) begin
        image_buffer_1_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        image_buffer_1_ce0 = grp_calc_hist_fu_580_image_buffer_1_ce0;
    end else begin
        image_buffer_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_reg_pp0_iter22_tmp_t_reg_1055 == 4'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter23 == 1'b1))) begin
        image_buffer_1_we0 = 1'b1;
    end else begin
        image_buffer_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter23 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        image_buffer_2_address0 = tmp_s_fu_869_p1;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        image_buffer_2_address0 = grp_calc_hist_fu_580_image_buffer_2_address0;
    end else begin
        image_buffer_2_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter23 == 1'b1))) begin
        image_buffer_2_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        image_buffer_2_ce0 = grp_calc_hist_fu_580_image_buffer_2_ce0;
    end else begin
        image_buffer_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_reg_pp0_iter22_tmp_t_reg_1055 == 4'd2) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter23 == 1'b1))) begin
        image_buffer_2_we0 = 1'b1;
    end else begin
        image_buffer_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter23 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        image_buffer_3_address0 = tmp_s_fu_869_p1;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        image_buffer_3_address0 = grp_calc_hist_fu_580_image_buffer_3_address0;
    end else begin
        image_buffer_3_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter23 == 1'b1))) begin
        image_buffer_3_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        image_buffer_3_ce0 = grp_calc_hist_fu_580_image_buffer_3_ce0;
    end else begin
        image_buffer_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_reg_pp0_iter22_tmp_t_reg_1055 == 4'd3) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter23 == 1'b1))) begin
        image_buffer_3_we0 = 1'b1;
    end else begin
        image_buffer_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter23 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        image_buffer_4_address0 = tmp_s_fu_869_p1;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        image_buffer_4_address0 = grp_calc_hist_fu_580_image_buffer_4_address0;
    end else begin
        image_buffer_4_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter23 == 1'b1))) begin
        image_buffer_4_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        image_buffer_4_ce0 = grp_calc_hist_fu_580_image_buffer_4_ce0;
    end else begin
        image_buffer_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_reg_pp0_iter22_tmp_t_reg_1055 == 4'd4) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter23 == 1'b1))) begin
        image_buffer_4_we0 = 1'b1;
    end else begin
        image_buffer_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter23 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        image_buffer_5_address0 = tmp_s_fu_869_p1;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        image_buffer_5_address0 = grp_calc_hist_fu_580_image_buffer_5_address0;
    end else begin
        image_buffer_5_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter23 == 1'b1))) begin
        image_buffer_5_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        image_buffer_5_ce0 = grp_calc_hist_fu_580_image_buffer_5_ce0;
    end else begin
        image_buffer_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_reg_pp0_iter22_tmp_t_reg_1055 == 4'd5) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter23 == 1'b1))) begin
        image_buffer_5_we0 = 1'b1;
    end else begin
        image_buffer_5_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter23 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        image_buffer_6_address0 = tmp_s_fu_869_p1;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        image_buffer_6_address0 = grp_calc_hist_fu_580_image_buffer_6_address0;
    end else begin
        image_buffer_6_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter23 == 1'b1))) begin
        image_buffer_6_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        image_buffer_6_ce0 = grp_calc_hist_fu_580_image_buffer_6_ce0;
    end else begin
        image_buffer_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_reg_pp0_iter22_tmp_t_reg_1055 == 4'd6) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter23 == 1'b1))) begin
        image_buffer_6_we0 = 1'b1;
    end else begin
        image_buffer_6_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter23 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        image_buffer_7_address0 = tmp_s_fu_869_p1;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        image_buffer_7_address0 = grp_calc_hist_fu_580_image_buffer_7_address0;
    end else begin
        image_buffer_7_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter23 == 1'b1))) begin
        image_buffer_7_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        image_buffer_7_ce0 = grp_calc_hist_fu_580_image_buffer_7_ce0;
    end else begin
        image_buffer_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_reg_pp0_iter22_tmp_t_reg_1055 == 4'd7) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter23 == 1'b1))) begin
        image_buffer_7_we0 = 1'b1;
    end else begin
        image_buffer_7_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter23 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        image_buffer_8_address0 = tmp_s_fu_869_p1;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        image_buffer_8_address0 = grp_calc_hist_fu_580_image_buffer_8_address0;
    end else begin
        image_buffer_8_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter23 == 1'b1))) begin
        image_buffer_8_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        image_buffer_8_ce0 = grp_calc_hist_fu_580_image_buffer_8_ce0;
    end else begin
        image_buffer_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_reg_pp0_iter22_tmp_t_reg_1055 == 4'd8) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter23 == 1'b1))) begin
        image_buffer_8_we0 = 1'b1;
    end else begin
        image_buffer_8_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter23 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        image_buffer_9_address0 = tmp_s_fu_869_p1;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        image_buffer_9_address0 = grp_calc_hist_fu_580_image_buffer_9_address0;
    end else begin
        image_buffer_9_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter23 == 1'b1))) begin
        image_buffer_9_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        image_buffer_9_ce0 = grp_calc_hist_fu_580_image_buffer_9_ce0;
    end else begin
        image_buffer_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_reg_pp0_iter22_tmp_t_reg_1055 == 4'd9) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter23 == 1'b1))) begin
        image_buffer_9_we0 = 1'b1;
    end else begin
        image_buffer_9_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0))) begin
        rst_address0 = tmp_11_fu_917_p1;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        rst_address0 = tmp_4_fu_894_p1;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        rst_address0 = grp_calc_hist_fu_580_rst_address0;
    end else begin
        rst_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state30) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
        rst_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        rst_ce0 = grp_calc_hist_fu_580_rst_ce0;
    end else begin
        rst_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        rst_ce1 = grp_calc_hist_fu_580_rst_ce1;
    end else begin
        rst_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        rst_we0 = 1'b1;
    end else begin
        rst_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        rst_we1 = grp_calc_hist_fu_580_rst_we1;
    end else begin
        rst_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        specs_address0 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        specs_address0 = 64'd1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        specs_address0 = 64'd0;
    end else begin
        specs_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        specs_ce0 = 1'b1;
    end else begin
        specs_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter6 == 1'b1)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter23 == 1'b1) & (ap_enable_reg_pp0_iter22 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter6 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter23 == 1'b1) & (ap_enable_reg_pp0_iter22 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            if (((1'b1 == ap_CS_fsm_state30) & (tmp_5_fu_899_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            if ((~((grp_calc_hist_fu_580_ap_done == 1'b0) | (ap_sig_ioackin_FEATURE_AWREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state32))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (exitcond2_fu_905_p2 == 1'd1)) & ~((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (exitcond2_fu_905_p2 == 1'd1)) | ((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state36;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            if (((1'b1 == FEATURE_BVALID) & (1'b1 == ap_CS_fsm_state40))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state40;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd14];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((1'b0 == INPUT_IMAGE_RVALID) & (ap_enable_reg_pp0_iter22 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((1'b0 == INPUT_IMAGE_RVALID) & (ap_enable_reg_pp0_iter22 == 1'b1)) | ((1'b1 == ap_block_state20_io) & (ap_enable_reg_pp0_iter15 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((1'b0 == INPUT_IMAGE_RVALID) & (ap_enable_reg_pp0_iter22 == 1'b1)) | ((1'b1 == ap_block_state20_io) & (ap_enable_reg_pp0_iter15 == 1'b1)));
end

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_11001 = ((1'b1 == ap_block_state35_io) & (ap_enable_reg_pp1_iter2 == 1'b1));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = ((1'b1 == ap_block_state35_io) & (ap_enable_reg_pp1_iter2 == 1'b1));
end

assign ap_block_state10_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage0_iter14 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state20_io = ((ap_sig_ioackin_INPUT_IMAGE_ARREADY == 1'b0) & (tmp_16_reg_1059 == 1'd1));
end

assign ap_block_state20_pp0_stage0_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage0_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage0_iter17 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp0_stage0_iter18 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp0_stage0_iter19 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp0_stage0_iter20 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp0_stage0_iter21 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state27_pp0_stage0_iter22 = (1'b0 == INPUT_IMAGE_RVALID);
end

assign ap_block_state28_pp0_stage0_iter23 = ~(1'b1 == 1'b1);

assign ap_block_state33_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state34_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state35_io = ((ap_sig_ioackin_FEATURE_WREADY == 1'b0) & (ap_reg_pp1_iter1_exitcond2_reg_1096 == 1'd0));
end

assign ap_block_state35_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign exitcond2_fu_905_p2 = ((indvar8_reg_569 == 6'd36) ? 1'b1 : 1'b0);

assign exitcond_flatten_fu_668_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_528_p4 == 11'd1536) ? 1'b1 : 1'b0);

assign exitcond_fu_680_p2 = ((indvar_reg_547 == 7'd96) ? 1'b1 : 1'b0);

assign feature3_fu_601_p4 = {{feature_r[31:1]}};

assign grp_calc_hist_fu_580_ap_start = ap_reg_grp_calc_hist_fu_580_ap_start;

assign grp_fu_765_p1 = 11'd96;

assign grp_fu_794_p1 = 14'd96;

assign grp_fu_922_p0 = grp_fu_922_p00;

assign grp_fu_922_p00 = ap_reg_pp0_iter4_tmp_9_reg_1017;

assign grp_fu_922_p1 = 30'd21846;

assign i_cast7_fu_625_p1 = i_reg_536;

assign i_cast7_mid1_fu_700_p1 = i_s_fu_694_p2;

assign i_mid2_fu_751_p3 = ((exitcond_fu_680_p2[0:0] === 1'b1) ? i_s_fu_694_p2 : i_reg_536);

assign i_s_fu_694_p2 = (5'd1 + i_reg_536);

assign imageptr2_sum_cast_fu_844_p1 = $signed(imageptr2_sum_fu_839_p2);

assign imageptr2_sum_fu_839_p2 = ($signed(tmp_10_cast_reg_962) + $signed(tmp_3_mid2_cast_fu_835_p1));

assign indvar_cast4_cast_fu_782_p1 = indvar_mid2_reg_992;

assign indvar_flatten_next_fu_674_p2 = (11'd1 + ap_phi_mux_indvar_flatten_phi_fu_528_p4);

assign indvar_mid2_fu_686_p3 = ((exitcond_fu_680_p2[0:0] === 1'b1) ? 7'd0 : indvar_reg_547);

assign indvar_next9_fu_911_p2 = (indvar8_reg_569 + 6'd1);

assign indvar_next_fu_759_p2 = (7'd1 + indvar_mid2_fu_686_p3);

assign indvarinc_fu_888_p2 = (invdar_reg_558 + 6'd1);

assign offset_fu_809_p2 = (tmp_7_fu_803_p2 - tmp_2_fu_799_p2);

assign offset_mid1_fu_824_p2 = (tmp_12_fu_819_p2 - tmp_2_mid1_reg_1043);

assign p_shl3_cast_fu_646_p1 = p_shl3_fu_638_p3;

assign p_shl3_cast_mid1_fu_721_p1 = p_shl3_mid1_fu_713_p3;

assign p_shl3_fu_638_p3 = {{tmp_10_fu_634_p1}, {7'd0}};

assign p_shl3_mid1_fu_713_p3 = {{tmp_14_fu_709_p1}, {7'd0}};

assign p_shl4_cast_fu_658_p1 = p_shl4_fu_650_p3;

assign p_shl4_cast_mid1_fu_733_p1 = p_shl4_mid1_fu_725_p3;

assign p_shl4_fu_650_p3 = {{tmp_10_fu_634_p1}, {5'd0}};

assign p_shl4_mid1_fu_725_p3 = {{tmp_14_fu_709_p1}, {5'd0}};

assign tmp_10_cast_fu_621_p1 = $signed(imageptr);

assign tmp_10_fu_634_p1 = i_reg_536[3:0];

assign tmp_11_fu_917_p1 = indvar8_reg_569;

assign tmp_12_fu_819_p2 = tmp_2_mid1_reg_1043 << 32'd2;

assign tmp_13_fu_829_p3 = ((ap_reg_pp0_iter6_exitcond_reg_987[0:0] === 1'b1) ? offset_mid1_fu_824_p2 : offset_reg_1038);

assign tmp_14_fu_709_p1 = i_s_fu_694_p2[3:0];

assign tmp_16_fu_863_p2 = ((grp_fu_765_p2 == 11'd0) ? 1'b1 : 1'b0);

assign tmp_2_fu_799_p2 = (tmp_1_reg_1023 + x_reg_945);

assign tmp_2_mid1_fu_815_p2 = (tmp_1_mid1_reg_1028 + x_reg_945);

assign tmp_3_fu_611_p1 = feature3_fu_601_p4;

assign tmp_3_mid2_cast_fu_835_p1 = $signed(tmp_13_fu_829_p3);

assign tmp_4_fu_894_p1 = invdar_reg_558;

assign tmp_5_fu_899_p2 = ((invdar_reg_558 == 6'd35) ? 1'b1 : 1'b0);

assign tmp_7_fu_803_p2 = tmp_2_fu_799_p2 << 32'd2;

assign tmp_8_cast_cast_mid2_1_fu_743_p3 = ((exitcond_fu_680_p2[0:0] === 1'b1) ? tmp_8_mid1_fu_737_p2 : tmp_8_fu_662_p2);

assign tmp_8_cast_cast_mid2_fu_779_p1 = $signed(tmp_8_cast_cast_mid2_1_reg_1002);

assign tmp_8_fu_662_p2 = (p_shl3_cast_fu_646_p1 - p_shl4_cast_fu_658_p1);

assign tmp_8_mid1_fu_737_p2 = (p_shl3_cast_mid1_fu_721_p1 - p_shl4_cast_mid1_fu_733_p1);

assign tmp_9_fu_785_p2 = ($signed(tmp_8_cast_cast_mid2_fu_779_p1) + $signed(indvar_cast4_cast_fu_782_p1));

assign tmp_fu_629_p2 = (i_cast7_fu_625_p1 + y_reg_934);

assign tmp_mid1_fu_704_p2 = (i_cast7_mid1_fu_700_p1 + y_reg_934);

assign tmp_s_fu_869_p1 = tmp_6_reg_1083;

always @ (posedge ap_clk) begin
    FEATURE_addr_reg_956[31] <= 1'b0;
    tmp_8_cast_cast_mid2_1_reg_1002[4:0] <= 5'b00000;
end

endmodule //color_hist
